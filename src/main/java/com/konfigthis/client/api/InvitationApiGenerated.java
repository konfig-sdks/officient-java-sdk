/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InvitationGenerateSecretUrlRequest;
import com.konfigthis.client.model.InvitationGenerateSecretUrlResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvitationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvitationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvitationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateSecretUrlCall(InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationGenerateSecretUrlRequest;

        // create path and map variables
        String localVarPath = "/1.0/people/selfservice/invite_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSecretUrlValidateBeforeCall(InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest, final ApiCallback _callback) throws ApiException {
        return generateSecretUrlCall(invitationGenerateSecretUrlRequest, _callback);

    }


    private ApiResponse<InvitationGenerateSecretUrlResponse> generateSecretUrlWithHttpInfo(InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = generateSecretUrlValidateBeforeCall(invitationGenerateSecretUrlRequest, null);
        Type localVarReturnType = new TypeToken<InvitationGenerateSecretUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateSecretUrlAsync(InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest, final ApiCallback<InvitationGenerateSecretUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSecretUrlValidateBeforeCall(invitationGenerateSecretUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitationGenerateSecretUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateSecretUrlRequestBuilder {
        private final String personId;

        private GenerateSecretUrlRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for generateSecretUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest = buildBodyParams();
            return generateSecretUrlCall(invitationGenerateSecretUrlRequest, _callback);
        }

        private InvitationGenerateSecretUrlRequest buildBodyParams() {
            InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest = new InvitationGenerateSecretUrlRequest();
            invitationGenerateSecretUrlRequest.personId(this.personId);
            return invitationGenerateSecretUrlRequest;
        }

        /**
         * Execute generateSecretUrl request
         * @return InvitationGenerateSecretUrlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public InvitationGenerateSecretUrlResponse execute() throws ApiException {
            InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest = buildBodyParams();
            ApiResponse<InvitationGenerateSecretUrlResponse> localVarResp = generateSecretUrlWithHttpInfo(invitationGenerateSecretUrlRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateSecretUrl request with HTTP info returned
         * @return ApiResponse&lt;InvitationGenerateSecretUrlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvitationGenerateSecretUrlResponse> executeWithHttpInfo() throws ApiException {
            InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest = buildBodyParams();
            return generateSecretUrlWithHttpInfo(invitationGenerateSecretUrlRequest);
        }

        /**
         * Execute generateSecretUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvitationGenerateSecretUrlResponse> _callback) throws ApiException {
            InvitationGenerateSecretUrlRequest invitationGenerateSecretUrlRequest = buildBodyParams();
            return generateSecretUrlAsync(invitationGenerateSecretUrlRequest, _callback);
        }
    }

    /**
     * Self-service invitation
     * Generate a secret URL that brings a person straight to the HR self-service platform.
     * @return GenerateSecretUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GenerateSecretUrlRequestBuilder generateSecretUrl(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GenerateSecretUrlRequestBuilder(personId);
    }
}
