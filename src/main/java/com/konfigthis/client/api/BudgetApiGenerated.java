/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BudgetAddBudgetItemRequest;
import com.konfigthis.client.model.BudgetAddBudgetItemResponse;
import com.konfigthis.client.model.BudgetAddItemRequest;
import com.konfigthis.client.model.BudgetAddItemResponse;
import com.konfigthis.client.model.BudgetDeleteBudgetByIdResponse;
import com.konfigthis.client.model.BudgetRemoveItemResponse;
import com.konfigthis.client.model.BudgetUpdateBudgetItemRequest;
import com.konfigthis.client.model.BudgetUpdateBudgetItemResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BudgetApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BudgetApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBudgetItemCall(BudgetAddBudgetItemRequest budgetAddBudgetItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = budgetAddBudgetItemRequest;

        // create path and map variables
        String localVarPath = "/1.0/budgets/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBudgetItemValidateBeforeCall(BudgetAddBudgetItemRequest budgetAddBudgetItemRequest, final ApiCallback _callback) throws ApiException {
        return addBudgetItemCall(budgetAddBudgetItemRequest, _callback);

    }


    private ApiResponse<BudgetAddBudgetItemResponse> addBudgetItemWithHttpInfo(BudgetAddBudgetItemRequest budgetAddBudgetItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addBudgetItemValidateBeforeCall(budgetAddBudgetItemRequest, null);
        Type localVarReturnType = new TypeToken<BudgetAddBudgetItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addBudgetItemAsync(BudgetAddBudgetItemRequest budgetAddBudgetItemRequest, final ApiCallback<BudgetAddBudgetItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBudgetItemValidateBeforeCall(budgetAddBudgetItemRequest, _callback);
        Type localVarReturnType = new TypeToken<BudgetAddBudgetItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddBudgetItemRequestBuilder {
        private String budgetType;
        private Integer maximum;
        private Integer year;
        private Integer employeeId;

        private AddBudgetItemRequestBuilder() {
        }

        /**
         * Set budgetType
         * @param budgetType The type of budget. (optional)
         * @return AddBudgetItemRequestBuilder
         */
        public AddBudgetItemRequestBuilder budgetType(String budgetType) {
            this.budgetType = budgetType;
            return this;
        }
        
        /**
         * Set maximum
         * @param maximum The maximum amount that will be set for the budget. (optional)
         * @return AddBudgetItemRequestBuilder
         */
        public AddBudgetItemRequestBuilder maximum(Integer maximum) {
            this.maximum = maximum;
            return this;
        }
        
        /**
         * Set year
         * @param year The year for which the budget will created. (optional)
         * @return AddBudgetItemRequestBuilder
         */
        public AddBudgetItemRequestBuilder year(Integer year) {
            this.year = year;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId The id of the employee for which the budget will be created. (optional)
         * @return AddBudgetItemRequestBuilder
         */
        public AddBudgetItemRequestBuilder employeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Build call for addBudgetItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BudgetAddBudgetItemRequest budgetAddBudgetItemRequest = buildBodyParams();
            return addBudgetItemCall(budgetAddBudgetItemRequest, _callback);
        }

        private BudgetAddBudgetItemRequest buildBodyParams() {
            BudgetAddBudgetItemRequest budgetAddBudgetItemRequest = new BudgetAddBudgetItemRequest();
            budgetAddBudgetItemRequest.budgetType(this.budgetType);
            budgetAddBudgetItemRequest.maximum(this.maximum);
            budgetAddBudgetItemRequest.year(this.year);
            budgetAddBudgetItemRequest.employeeId(this.employeeId);
            return budgetAddBudgetItemRequest;
        }

        /**
         * Execute addBudgetItem request
         * @return BudgetAddBudgetItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BudgetAddBudgetItemResponse execute() throws ApiException {
            BudgetAddBudgetItemRequest budgetAddBudgetItemRequest = buildBodyParams();
            ApiResponse<BudgetAddBudgetItemResponse> localVarResp = addBudgetItemWithHttpInfo(budgetAddBudgetItemRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addBudgetItem request with HTTP info returned
         * @return ApiResponse&lt;BudgetAddBudgetItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetAddBudgetItemResponse> executeWithHttpInfo() throws ApiException {
            BudgetAddBudgetItemRequest budgetAddBudgetItemRequest = buildBodyParams();
            return addBudgetItemWithHttpInfo(budgetAddBudgetItemRequest);
        }

        /**
         * Execute addBudgetItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetAddBudgetItemResponse> _callback) throws ApiException {
            BudgetAddBudgetItemRequest budgetAddBudgetItemRequest = buildBodyParams();
            return addBudgetItemAsync(budgetAddBudgetItemRequest, _callback);
        }
    }

    /**
     * Add budget
     * 
     * @return AddBudgetItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddBudgetItemRequestBuilder addBudgetItem() throws IllegalArgumentException {
        return new AddBudgetItemRequestBuilder();
    }
    private okhttp3.Call addItemCall(Integer budgetId, BudgetAddItemRequest budgetAddItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = budgetAddItemRequest;

        // create path and map variables
        String localVarPath = "/1.0/budgets/{budget_id}/items/add"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addItemValidateBeforeCall(Integer budgetId, BudgetAddItemRequest budgetAddItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling addItem(Async)");
        }

        return addItemCall(budgetId, budgetAddItemRequest, _callback);

    }


    private ApiResponse<BudgetAddItemResponse> addItemWithHttpInfo(Integer budgetId, BudgetAddItemRequest budgetAddItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addItemValidateBeforeCall(budgetId, budgetAddItemRequest, null);
        Type localVarReturnType = new TypeToken<BudgetAddItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addItemAsync(Integer budgetId, BudgetAddItemRequest budgetAddItemRequest, final ApiCallback<BudgetAddItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addItemValidateBeforeCall(budgetId, budgetAddItemRequest, _callback);
        Type localVarReturnType = new TypeToken<BudgetAddItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddItemRequestBuilder {
        private final Integer budgetId;
        private String itemName;
        private Double cost;
        private Integer employeeId;

        private AddItemRequestBuilder(Integer budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set itemName
         * @param itemName  (optional)
         * @return AddItemRequestBuilder
         */
        public AddItemRequestBuilder itemName(String itemName) {
            this.itemName = itemName;
            return this;
        }
        
        /**
         * Set cost
         * @param cost  (optional)
         * @return AddItemRequestBuilder
         */
        public AddItemRequestBuilder cost(Double cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return AddItemRequestBuilder
         */
        public AddItemRequestBuilder employeeId(Integer employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Build call for addItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BudgetAddItemRequest budgetAddItemRequest = buildBodyParams();
            return addItemCall(budgetId, budgetAddItemRequest, _callback);
        }

        private BudgetAddItemRequest buildBodyParams() {
            BudgetAddItemRequest budgetAddItemRequest = new BudgetAddItemRequest();
            budgetAddItemRequest.itemName(this.itemName);
            budgetAddItemRequest.cost(this.cost);
            budgetAddItemRequest.employeeId(this.employeeId);
            return budgetAddItemRequest;
        }

        /**
         * Execute addItem request
         * @return BudgetAddItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BudgetAddItemResponse execute() throws ApiException {
            BudgetAddItemRequest budgetAddItemRequest = buildBodyParams();
            ApiResponse<BudgetAddItemResponse> localVarResp = addItemWithHttpInfo(budgetId, budgetAddItemRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addItem request with HTTP info returned
         * @return ApiResponse&lt;BudgetAddItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetAddItemResponse> executeWithHttpInfo() throws ApiException {
            BudgetAddItemRequest budgetAddItemRequest = buildBodyParams();
            return addItemWithHttpInfo(budgetId, budgetAddItemRequest);
        }

        /**
         * Execute addItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetAddItemResponse> _callback) throws ApiException {
            BudgetAddItemRequest budgetAddItemRequest = buildBodyParams();
            return addItemAsync(budgetId, budgetAddItemRequest, _callback);
        }
    }

    /**
     * Add budget item
     * 
     * @param budgetId  (required)
     * @return AddItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddItemRequestBuilder addItem(Integer budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
        return new AddItemRequestBuilder(budgetId);
    }
    private okhttp3.Call deleteBudgetByIdCall(Integer budgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/budgets/{budget_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBudgetByIdValidateBeforeCall(Integer budgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling deleteBudgetById(Async)");
        }

        return deleteBudgetByIdCall(budgetId, _callback);

    }


    private ApiResponse<BudgetDeleteBudgetByIdResponse> deleteBudgetByIdWithHttpInfo(Integer budgetId) throws ApiException {
        okhttp3.Call localVarCall = deleteBudgetByIdValidateBeforeCall(budgetId, null);
        Type localVarReturnType = new TypeToken<BudgetDeleteBudgetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBudgetByIdAsync(Integer budgetId, final ApiCallback<BudgetDeleteBudgetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBudgetByIdValidateBeforeCall(budgetId, _callback);
        Type localVarReturnType = new TypeToken<BudgetDeleteBudgetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteBudgetByIdRequestBuilder {
        private final Integer budgetId;

        private DeleteBudgetByIdRequestBuilder(Integer budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Build call for deleteBudgetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBudgetByIdCall(budgetId, _callback);
        }


        /**
         * Execute deleteBudgetById request
         * @return BudgetDeleteBudgetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BudgetDeleteBudgetByIdResponse execute() throws ApiException {
            ApiResponse<BudgetDeleteBudgetByIdResponse> localVarResp = deleteBudgetByIdWithHttpInfo(budgetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteBudgetById request with HTTP info returned
         * @return ApiResponse&lt;BudgetDeleteBudgetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetDeleteBudgetByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteBudgetByIdWithHttpInfo(budgetId);
        }

        /**
         * Execute deleteBudgetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetDeleteBudgetByIdResponse> _callback) throws ApiException {
            return deleteBudgetByIdAsync(budgetId, _callback);
        }
    }

    /**
     * Delete budget
     * 
     * @param budgetId The id of the budget that will be deleted (required)
     * @return DeleteBudgetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBudgetByIdRequestBuilder deleteBudgetById(Integer budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
        return new DeleteBudgetByIdRequestBuilder(budgetId);
    }
    private okhttp3.Call removeItemCall(Integer budgetId, Integer itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/budgets/{budget_id}/items/{item_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeItemValidateBeforeCall(Integer budgetId, Integer itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling removeItem(Async)");
        }

        return removeItemCall(budgetId, itemId, _callback);

    }


    private ApiResponse<BudgetRemoveItemResponse> removeItemWithHttpInfo(Integer budgetId, Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = removeItemValidateBeforeCall(budgetId, itemId, null);
        Type localVarReturnType = new TypeToken<BudgetRemoveItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeItemAsync(Integer budgetId, Integer itemId, final ApiCallback<BudgetRemoveItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeItemValidateBeforeCall(budgetId, itemId, _callback);
        Type localVarReturnType = new TypeToken<BudgetRemoveItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveItemRequestBuilder {
        private final Integer budgetId;
        private Integer itemId;

        private RemoveItemRequestBuilder(Integer budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set itemId
         * @param itemId  (optional)
         * @return RemoveItemRequestBuilder
         */
        public RemoveItemRequestBuilder itemId(Integer itemId) {
            this.itemId = itemId;
            return this;
        }
        
        /**
         * Build call for removeItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeItemCall(budgetId, itemId, _callback);
        }


        /**
         * Execute removeItem request
         * @return BudgetRemoveItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BudgetRemoveItemResponse execute() throws ApiException {
            ApiResponse<BudgetRemoveItemResponse> localVarResp = removeItemWithHttpInfo(budgetId, itemId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeItem request with HTTP info returned
         * @return ApiResponse&lt;BudgetRemoveItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetRemoveItemResponse> executeWithHttpInfo() throws ApiException {
            return removeItemWithHttpInfo(budgetId, itemId);
        }

        /**
         * Execute removeItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetRemoveItemResponse> _callback) throws ApiException {
            return removeItemAsync(budgetId, itemId, _callback);
        }
    }

    /**
     * Delete budget item
     * 
     * @param budgetId  (required)
     * @return RemoveItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveItemRequestBuilder removeItem(Integer budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
        return new RemoveItemRequestBuilder(budgetId);
    }
    private okhttp3.Call updateBudgetItemCall(Integer budgetId, BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = budgetUpdateBudgetItemRequest;

        // create path and map variables
        String localVarPath = "/1.0/budgets/{budget_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBudgetItemValidateBeforeCall(Integer budgetId, BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateBudgetItem(Async)");
        }

        return updateBudgetItemCall(budgetId, budgetUpdateBudgetItemRequest, _callback);

    }


    private ApiResponse<BudgetUpdateBudgetItemResponse> updateBudgetItemWithHttpInfo(Integer budgetId, BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBudgetItemValidateBeforeCall(budgetId, budgetUpdateBudgetItemRequest, null);
        Type localVarReturnType = new TypeToken<BudgetUpdateBudgetItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBudgetItemAsync(Integer budgetId, BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest, final ApiCallback<BudgetUpdateBudgetItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBudgetItemValidateBeforeCall(budgetId, budgetUpdateBudgetItemRequest, _callback);
        Type localVarReturnType = new TypeToken<BudgetUpdateBudgetItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBudgetItemRequestBuilder {
        private final Integer budgetId;
        private Integer maximum;

        private UpdateBudgetItemRequestBuilder(Integer budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set maximum
         * @param maximum The new maximum amount for the budget. (optional)
         * @return UpdateBudgetItemRequestBuilder
         */
        public UpdateBudgetItemRequestBuilder maximum(Integer maximum) {
            this.maximum = maximum;
            return this;
        }
        
        /**
         * Build call for updateBudgetItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest = buildBodyParams();
            return updateBudgetItemCall(budgetId, budgetUpdateBudgetItemRequest, _callback);
        }

        private BudgetUpdateBudgetItemRequest buildBodyParams() {
            BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest = new BudgetUpdateBudgetItemRequest();
            budgetUpdateBudgetItemRequest.maximum(this.maximum);
            return budgetUpdateBudgetItemRequest;
        }

        /**
         * Execute updateBudgetItem request
         * @return BudgetUpdateBudgetItemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public BudgetUpdateBudgetItemResponse execute() throws ApiException {
            BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest = buildBodyParams();
            ApiResponse<BudgetUpdateBudgetItemResponse> localVarResp = updateBudgetItemWithHttpInfo(budgetId, budgetUpdateBudgetItemRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBudgetItem request with HTTP info returned
         * @return ApiResponse&lt;BudgetUpdateBudgetItemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetUpdateBudgetItemResponse> executeWithHttpInfo() throws ApiException {
            BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest = buildBodyParams();
            return updateBudgetItemWithHttpInfo(budgetId, budgetUpdateBudgetItemRequest);
        }

        /**
         * Execute updateBudgetItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetUpdateBudgetItemResponse> _callback) throws ApiException {
            BudgetUpdateBudgetItemRequest budgetUpdateBudgetItemRequest = buildBodyParams();
            return updateBudgetItemAsync(budgetId, budgetUpdateBudgetItemRequest, _callback);
        }
    }

    /**
     * Edit budget
     * 
     * @param budgetId The id of the budget that will be edited. (required)
     * @return UpdateBudgetItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBudgetItemRequestBuilder updateBudgetItem(Integer budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
        return new UpdateBudgetItemRequestBuilder(budgetId);
    }
}
