/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.PersonAddNewResponse;
import com.konfigthis.client.model.PersonAddToCalendar200Response;
import com.konfigthis.client.model.PersonAddToCalendarResponse;
import com.konfigthis.client.model.PersonEditDetailResponse;
import com.konfigthis.client.model.PersonGetBudgetsByYearResponse;
import com.konfigthis.client.model.PersonGetCurrentWageResponse;
import com.konfigthis.client.model.PersonGetCustomFieldsResponse;
import com.konfigthis.client.model.PersonGetDailyCalendarResponse;
import com.konfigthis.client.model.PersonGetDetailResponse;
import com.konfigthis.client.model.PersonGetEventTypeLimitsResponse;
import com.konfigthis.client.model.PersonGetManagerDetailsResponse;
import com.konfigthis.client.model.PersonGetMonthlyCalendarResponse;
import com.konfigthis.client.model.PersonGetOneOffWageComponentsByMonthResponse;
import com.konfigthis.client.model.PersonGetPersonalDataChangesResponse;
import com.konfigthis.client.model.PersonGetVerzuimPeriodsResponse;
import com.konfigthis.client.model.PersonGetWageHistoryResponse;
import com.konfigthis.client.model.PersonGetYearlyCalendarResponse;
import com.konfigthis.client.model.PersonListAvailableComponentsResponse;
import com.konfigthis.client.model.PersonListBudgetItemsResponse;
import com.konfigthis.client.model.PersonListDimonasByPersonResponse;
import com.konfigthis.client.model.PersonListPeopleResponse;
import com.konfigthis.client.model.PersonOverwriteEventResponse;
import com.konfigthis.client.model.PersonRemoveEventResponse;
import com.konfigthis.client.model.PersonSearchByCriteriaResponseInner;
import com.konfigthis.client.model.PersonSetFunctionDescriptionResponse;
import com.konfigthis.client.model.PersonUpdateEventTypeLimitResponse;
import com.konfigthis.client.model.PersonUpdateManagerResponse;
import com.konfigthis.client.model.PersonUpdateTimeWorkedResponse;
import com.konfigthis.client.model.PersonUploadAvatarResponse;
import com.konfigthis.client.model.PersonViewRoleHistoryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PersonApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return addNewCall(_callback);

    }


    private ApiResponse<PersonAddNewResponse> addNewWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addNewValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PersonAddNewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewAsync(final ApiCallback<PersonAddNewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PersonAddNewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewRequestBuilder {

        private AddNewRequestBuilder() {
        }

        /**
         * Build call for addNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addNewCall(_callback);
        }


        /**
         * Execute addNew request
         * @return PersonAddNewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonAddNewResponse execute() throws ApiException {
            ApiResponse<PersonAddNewResponse> localVarResp = addNewWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNew request with HTTP info returned
         * @return ApiResponse&lt;PersonAddNewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonAddNewResponse> executeWithHttpInfo() throws ApiException {
            return addNewWithHttpInfo();
        }

        /**
         * Execute addNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonAddNewResponse> _callback) throws ApiException {
            return addNewAsync(_callback);
        }
    }

    /**
     * Add person
     * Add a new person to Officient
     * @return AddNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddNewRequestBuilder addNew() throws IllegalArgumentException {
        return new AddNewRequestBuilder();
    }
    private okhttp3.Call addToCalendarCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/events/add"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCalendarValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling addToCalendar(Async)");
        }

        return addToCalendarCall(personId, _callback);

    }


    private ApiResponse<PersonAddToCalendarResponse> addToCalendarWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = addToCalendarValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonAddToCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToCalendarAsync(Integer personId, final ApiCallback<PersonAddToCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCalendarValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonAddToCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToCalendarRequestBuilder {
        private final Integer personId;

        private AddToCalendarRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for addToCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToCalendarCall(personId, _callback);
        }


        /**
         * Execute addToCalendar request
         * @return PersonAddToCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonAddToCalendarResponse execute() throws ApiException {
            ApiResponse<PersonAddToCalendarResponse> localVarResp = addToCalendarWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToCalendar request with HTTP info returned
         * @return ApiResponse&lt;PersonAddToCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonAddToCalendarResponse> executeWithHttpInfo() throws ApiException {
            return addToCalendarWithHttpInfo(personId);
        }

        /**
         * Execute addToCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonAddToCalendarResponse> _callback) throws ApiException {
            return addToCalendarAsync(personId, _callback);
        }
    }

    /**
     * Add event
     * Add new events to a calender (eg a day off, overtime,..)
     * @param personId  (required)
     * @return AddToCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddToCalendarRequestBuilder addToCalendar(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new AddToCalendarRequestBuilder(personId);
    }
    private okhttp3.Call addToCalendar_0Call(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/priorityschemes/events/add"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCalendar_0ValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling addToCalendar_0(Async)");
        }

        return addToCalendar_0Call(personId, _callback);

    }


    private ApiResponse<PersonAddToCalendar200Response> addToCalendar_0WithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = addToCalendar_0ValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonAddToCalendar200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToCalendar_0Async(Integer personId, final ApiCallback<PersonAddToCalendar200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCalendar_0ValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonAddToCalendar200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToCalendar0RequestBuilder {
        private final Integer personId;

        private AddToCalendar0RequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for addToCalendar_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToCalendar_0Call(personId, _callback);
        }


        /**
         * Execute addToCalendar_0 request
         * @return PersonAddToCalendar200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonAddToCalendar200Response execute() throws ApiException {
            ApiResponse<PersonAddToCalendar200Response> localVarResp = addToCalendar_0WithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToCalendar_0 request with HTTP info returned
         * @return ApiResponse&lt;PersonAddToCalendar200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonAddToCalendar200Response> executeWithHttpInfo() throws ApiException {
            return addToCalendar_0WithHttpInfo(personId);
        }

        /**
         * Execute addToCalendar_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonAddToCalendar200Response> _callback) throws ApiException {
            return addToCalendar_0Async(personId, _callback);
        }
    }

    /**
     * Use priority scheme
     * Adds events to a person&#39;s calendar based on a priority scheme of event types
     * @param personId  (required)
     * @return AddToCalendar0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddToCalendar0RequestBuilder addToCalendar_0(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new AddToCalendar0RequestBuilder(personId);
    }
    private okhttp3.Call editDetailCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/detail"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editDetailValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling editDetail(Async)");
        }

        return editDetailCall(personId, _callback);

    }


    private ApiResponse<PersonEditDetailResponse> editDetailWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = editDetailValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonEditDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editDetailAsync(Integer personId, final ApiCallback<PersonEditDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editDetailValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonEditDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditDetailRequestBuilder {
        private final Integer personId;

        private EditDetailRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for editDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return editDetailCall(personId, _callback);
        }


        /**
         * Execute editDetail request
         * @return PersonEditDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonEditDetailResponse execute() throws ApiException {
            ApiResponse<PersonEditDetailResponse> localVarResp = editDetailWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editDetail request with HTTP info returned
         * @return ApiResponse&lt;PersonEditDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonEditDetailResponse> executeWithHttpInfo() throws ApiException {
            return editDetailWithHttpInfo(personId);
        }

        /**
         * Execute editDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonEditDetailResponse> _callback) throws ApiException {
            return editDetailAsync(personId, _callback);
        }
    }

    /**
     * Edit person
     * 
     * @param personId  (required)
     * @return EditDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public EditDetailRequestBuilder editDetail(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new EditDetailRequestBuilder(personId);
    }
    private okhttp3.Call getBudgetsByYearCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/budgets/people/{person_id}/{year}/list"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBudgetsByYearValidateBeforeCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getBudgetsByYear(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getBudgetsByYear(Async)");
        }

        return getBudgetsByYearCall(personId, year, _callback);

    }


    private ApiResponse<PersonGetBudgetsByYearResponse> getBudgetsByYearWithHttpInfo(Integer personId, Integer year) throws ApiException {
        okhttp3.Call localVarCall = getBudgetsByYearValidateBeforeCall(personId, year, null);
        Type localVarReturnType = new TypeToken<PersonGetBudgetsByYearResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBudgetsByYearAsync(Integer personId, Integer year, final ApiCallback<PersonGetBudgetsByYearResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBudgetsByYearValidateBeforeCall(personId, year, _callback);
        Type localVarReturnType = new TypeToken<PersonGetBudgetsByYearResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBudgetsByYearRequestBuilder {
        private final Integer personId;
        private final Integer year;

        private GetBudgetsByYearRequestBuilder(Integer personId, Integer year) {
            this.personId = personId;
            this.year = year;
        }

        /**
         * Build call for getBudgetsByYear
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBudgetsByYearCall(personId, year, _callback);
        }


        /**
         * Execute getBudgetsByYear request
         * @return PersonGetBudgetsByYearResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetBudgetsByYearResponse execute() throws ApiException {
            ApiResponse<PersonGetBudgetsByYearResponse> localVarResp = getBudgetsByYearWithHttpInfo(personId, year);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBudgetsByYear request with HTTP info returned
         * @return ApiResponse&lt;PersonGetBudgetsByYearResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetBudgetsByYearResponse> executeWithHttpInfo() throws ApiException {
            return getBudgetsByYearWithHttpInfo(personId, year);
        }

        /**
         * Execute getBudgetsByYear request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetBudgetsByYearResponse> _callback) throws ApiException {
            return getBudgetsByYearAsync(personId, year, _callback);
        }
    }

    /**
     * List budgets
     * Fetches a list of budgets for a given person and year.
     * @param personId  (required)
     * @param year  (required)
     * @return GetBudgetsByYearRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetBudgetsByYearRequestBuilder getBudgetsByYear(Integer personId, Integer year) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        return new GetBudgetsByYearRequestBuilder(personId, year);
    }
    private okhttp3.Call getCurrentWageCall(String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/{person_id}/current"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentWageValidateBeforeCall(String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getCurrentWage(Async)");
        }

        return getCurrentWageCall(personId, _callback);

    }


    private ApiResponse<PersonGetCurrentWageResponse> getCurrentWageWithHttpInfo(String personId) throws ApiException {
        okhttp3.Call localVarCall = getCurrentWageValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonGetCurrentWageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentWageAsync(String personId, final ApiCallback<PersonGetCurrentWageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentWageValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonGetCurrentWageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentWageRequestBuilder {
        private final String personId;

        private GetCurrentWageRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for getCurrentWage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentWageCall(personId, _callback);
        }


        /**
         * Execute getCurrentWage request
         * @return PersonGetCurrentWageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetCurrentWageResponse execute() throws ApiException {
            ApiResponse<PersonGetCurrentWageResponse> localVarResp = getCurrentWageWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentWage request with HTTP info returned
         * @return ApiResponse&lt;PersonGetCurrentWageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetCurrentWageResponse> executeWithHttpInfo() throws ApiException {
            return getCurrentWageWithHttpInfo(personId);
        }

        /**
         * Execute getCurrentWage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetCurrentWageResponse> _callback) throws ApiException {
            return getCurrentWageAsync(personId, _callback);
        }
    }

    /**
     * Current wage
     * Get the current wage details for one person
     * @param personId The person you would like to receive wage information on (required)
     * @return GetCurrentWageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentWageRequestBuilder getCurrentWage(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetCurrentWageRequestBuilder(personId);
    }
    private okhttp3.Call getCurrentWeeklyScheduleCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/weekly_schedule/current"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentWeeklyScheduleValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getCurrentWeeklySchedule(Async)");
        }

        return getCurrentWeeklyScheduleCall(personId, _callback);

    }


    private ApiResponse<String> getCurrentWeeklyScheduleWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getCurrentWeeklyScheduleValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentWeeklyScheduleAsync(Integer personId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentWeeklyScheduleValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentWeeklyScheduleRequestBuilder {
        private final Integer personId;

        private GetCurrentWeeklyScheduleRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for getCurrentWeeklySchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentWeeklyScheduleCall(personId, _callback);
        }


        /**
         * Execute getCurrentWeeklySchedule request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getCurrentWeeklyScheduleWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentWeeklySchedule request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getCurrentWeeklyScheduleWithHttpInfo(personId);
        }

        /**
         * Execute getCurrentWeeklySchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getCurrentWeeklyScheduleAsync(personId, _callback);
        }
    }

    /**
     * Weekly schedule
     * 
     * @param personId  (required)
     * @return GetCurrentWeeklyScheduleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentWeeklyScheduleRequestBuilder getCurrentWeeklySchedule(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new GetCurrentWeeklyScheduleRequestBuilder(personId);
    }
    private okhttp3.Call getCustomFieldsCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/custom_fields"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomFieldsValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getCustomFields(Async)");
        }

        return getCustomFieldsCall(personId, _callback);

    }


    private ApiResponse<PersonGetCustomFieldsResponse> getCustomFieldsWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonGetCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomFieldsAsync(Integer personId, final ApiCallback<PersonGetCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomFieldsValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonGetCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomFieldsRequestBuilder {
        private final Integer personId;

        private GetCustomFieldsRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for getCustomFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomFieldsCall(personId, _callback);
        }


        /**
         * Execute getCustomFields request
         * @return PersonGetCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetCustomFieldsResponse execute() throws ApiException {
            ApiResponse<PersonGetCustomFieldsResponse> localVarResp = getCustomFieldsWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomFields request with HTTP info returned
         * @return ApiResponse&lt;PersonGetCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return getCustomFieldsWithHttpInfo(personId);
        }

        /**
         * Execute getCustomFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetCustomFieldsResponse> _callback) throws ApiException {
            return getCustomFieldsAsync(personId, _callback);
        }
    }

    /**
     * Person custom fields
     * 
     * @param personId  (required)
     * @return GetCustomFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomFieldsRequestBuilder getCustomFields(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new GetCustomFieldsRequestBuilder(personId);
    }
    private okhttp3.Call getDailyCalendarCall(Integer personId, Integer year, Integer month, Integer day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}/{month}/{day}"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyCalendarValidateBeforeCall(Integer personId, Integer year, Integer month, Integer day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getDailyCalendar(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getDailyCalendar(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getDailyCalendar(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling getDailyCalendar(Async)");
        }

        return getDailyCalendarCall(personId, year, month, day, _callback);

    }


    private ApiResponse<PersonGetDailyCalendarResponse> getDailyCalendarWithHttpInfo(Integer personId, Integer year, Integer month, Integer day) throws ApiException {
        okhttp3.Call localVarCall = getDailyCalendarValidateBeforeCall(personId, year, month, day, null);
        Type localVarReturnType = new TypeToken<PersonGetDailyCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDailyCalendarAsync(Integer personId, Integer year, Integer month, Integer day, final ApiCallback<PersonGetDailyCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyCalendarValidateBeforeCall(personId, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<PersonGetDailyCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDailyCalendarRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private final Integer month;
        private final Integer day;

        private GetDailyCalendarRequestBuilder(Integer personId, Integer year, Integer month, Integer day) {
            this.personId = personId;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for getDailyCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailyCalendarCall(personId, year, month, day, _callback);
        }


        /**
         * Execute getDailyCalendar request
         * @return PersonGetDailyCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetDailyCalendarResponse execute() throws ApiException {
            ApiResponse<PersonGetDailyCalendarResponse> localVarResp = getDailyCalendarWithHttpInfo(personId, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDailyCalendar request with HTTP info returned
         * @return ApiResponse&lt;PersonGetDailyCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetDailyCalendarResponse> executeWithHttpInfo() throws ApiException {
            return getDailyCalendarWithHttpInfo(personId, year, month, day);
        }

        /**
         * Execute getDailyCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetDailyCalendarResponse> _callback) throws ApiException {
            return getDailyCalendarAsync(personId, year, month, day, _callback);
        }
    }

    /**
     * Daily calendar
     * List the time off, overtime &amp; scheduled time for a single person for a single day
     * @param personId The person you would like to receive calender information on (required)
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @return GetDailyCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDailyCalendarRequestBuilder getDailyCalendar(Integer personId, Integer year, Integer month, Integer day) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
        return new GetDailyCalendarRequestBuilder(personId, year, month, day);
    }
    private okhttp3.Call getDetailCall(String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/detail"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailValidateBeforeCall(String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getDetail(Async)");
        }

        return getDetailCall(personId, _callback);

    }


    private ApiResponse<PersonGetDetailResponse> getDetailWithHttpInfo(String personId) throws ApiException {
        okhttp3.Call localVarCall = getDetailValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonGetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailAsync(String personId, final ApiCallback<PersonGetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonGetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailRequestBuilder {
        private final String personId;

        private GetDetailRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for getDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailCall(personId, _callback);
        }


        /**
         * Execute getDetail request
         * @return PersonGetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetDetailResponse execute() throws ApiException {
            ApiResponse<PersonGetDetailResponse> localVarResp = getDetailWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetail request with HTTP info returned
         * @return ApiResponse&lt;PersonGetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getDetailWithHttpInfo(personId);
        }

        /**
         * Execute getDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetDetailResponse> _callback) throws ApiException {
            return getDetailAsync(personId, _callback);
        }
    }

    /**
     * Person detail
     * 
     * @param personId  (required)
     * @return GetDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailRequestBuilder getDetail(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetDetailRequestBuilder(personId);
    }
    private okhttp3.Call getEventTypeLimitsCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/events/types/{year}/limits"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventTypeLimitsValidateBeforeCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getEventTypeLimits(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getEventTypeLimits(Async)");
        }

        return getEventTypeLimitsCall(personId, year, _callback);

    }


    private ApiResponse<PersonGetEventTypeLimitsResponse> getEventTypeLimitsWithHttpInfo(Integer personId, Integer year) throws ApiException {
        okhttp3.Call localVarCall = getEventTypeLimitsValidateBeforeCall(personId, year, null);
        Type localVarReturnType = new TypeToken<PersonGetEventTypeLimitsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventTypeLimitsAsync(Integer personId, Integer year, final ApiCallback<PersonGetEventTypeLimitsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventTypeLimitsValidateBeforeCall(personId, year, _callback);
        Type localVarReturnType = new TypeToken<PersonGetEventTypeLimitsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventTypeLimitsRequestBuilder {
        private final Integer personId;
        private final Integer year;

        private GetEventTypeLimitsRequestBuilder(Integer personId, Integer year) {
            this.personId = personId;
            this.year = year;
        }

        /**
         * Build call for getEventTypeLimits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventTypeLimitsCall(personId, year, _callback);
        }


        /**
         * Execute getEventTypeLimits request
         * @return PersonGetEventTypeLimitsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetEventTypeLimitsResponse execute() throws ApiException {
            ApiResponse<PersonGetEventTypeLimitsResponse> localVarResp = getEventTypeLimitsWithHttpInfo(personId, year);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventTypeLimits request with HTTP info returned
         * @return ApiResponse&lt;PersonGetEventTypeLimitsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetEventTypeLimitsResponse> executeWithHttpInfo() throws ApiException {
            return getEventTypeLimitsWithHttpInfo(personId, year);
        }

        /**
         * Execute getEventTypeLimits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetEventTypeLimitsResponse> _callback) throws ApiException {
            return getEventTypeLimitsAsync(personId, year, _callback);
        }
    }

    /**
     * Event type limits
     * This API can tell how many days off a certain person has in a certain year
     * @param personId  (required)
     * @param year  (required)
     * @return GetEventTypeLimitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetEventTypeLimitsRequestBuilder getEventTypeLimits(Integer personId, Integer year) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        return new GetEventTypeLimitsRequestBuilder(personId, year);
    }
    private okhttp3.Call getManagerDetailsCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/manager"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManagerDetailsValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getManagerDetails(Async)");
        }

        return getManagerDetailsCall(personId, _callback);

    }


    private ApiResponse<PersonGetManagerDetailsResponse> getManagerDetailsWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getManagerDetailsValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonGetManagerDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getManagerDetailsAsync(Integer personId, final ApiCallback<PersonGetManagerDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getManagerDetailsValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonGetManagerDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetManagerDetailsRequestBuilder {
        private final Integer personId;

        private GetManagerDetailsRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for getManagerDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getManagerDetailsCall(personId, _callback);
        }


        /**
         * Execute getManagerDetails request
         * @return PersonGetManagerDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetManagerDetailsResponse execute() throws ApiException {
            ApiResponse<PersonGetManagerDetailsResponse> localVarResp = getManagerDetailsWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getManagerDetails request with HTTP info returned
         * @return ApiResponse&lt;PersonGetManagerDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetManagerDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getManagerDetailsWithHttpInfo(personId);
        }

        /**
         * Execute getManagerDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetManagerDetailsResponse> _callback) throws ApiException {
            return getManagerDetailsAsync(personId, _callback);
        }
    }

    /**
     * Person manager
     * 
     * @param personId  (required)
     * @return GetManagerDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetManagerDetailsRequestBuilder getManagerDetails(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new GetManagerDetailsRequestBuilder(personId);
    }
    private okhttp3.Call getMonthlyCalendarCall(Integer personId, Integer year, Integer month, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}/{month}"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonthlyCalendarValidateBeforeCall(Integer personId, Integer year, Integer month, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getMonthlyCalendar(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getMonthlyCalendar(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getMonthlyCalendar(Async)");
        }

        return getMonthlyCalendarCall(personId, year, month, _callback);

    }


    private ApiResponse<PersonGetMonthlyCalendarResponse> getMonthlyCalendarWithHttpInfo(Integer personId, Integer year, Integer month) throws ApiException {
        okhttp3.Call localVarCall = getMonthlyCalendarValidateBeforeCall(personId, year, month, null);
        Type localVarReturnType = new TypeToken<PersonGetMonthlyCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMonthlyCalendarAsync(Integer personId, Integer year, Integer month, final ApiCallback<PersonGetMonthlyCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonthlyCalendarValidateBeforeCall(personId, year, month, _callback);
        Type localVarReturnType = new TypeToken<PersonGetMonthlyCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMonthlyCalendarRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private final Integer month;

        private GetMonthlyCalendarRequestBuilder(Integer personId, Integer year, Integer month) {
            this.personId = personId;
            this.year = year;
            this.month = month;
        }

        /**
         * Build call for getMonthlyCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMonthlyCalendarCall(personId, year, month, _callback);
        }


        /**
         * Execute getMonthlyCalendar request
         * @return PersonGetMonthlyCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetMonthlyCalendarResponse execute() throws ApiException {
            ApiResponse<PersonGetMonthlyCalendarResponse> localVarResp = getMonthlyCalendarWithHttpInfo(personId, year, month);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMonthlyCalendar request with HTTP info returned
         * @return ApiResponse&lt;PersonGetMonthlyCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetMonthlyCalendarResponse> executeWithHttpInfo() throws ApiException {
            return getMonthlyCalendarWithHttpInfo(personId, year, month);
        }

        /**
         * Execute getMonthlyCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetMonthlyCalendarResponse> _callback) throws ApiException {
            return getMonthlyCalendarAsync(personId, year, month, _callback);
        }
    }

    /**
     * Monthly calendar
     * List the time off, overtime &amp; scheduled time for a single person for an entire month
     * @param personId The person you would like to receive calender information on (required)
     * @param year  (required)
     * @param month  (required)
     * @return GetMonthlyCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetMonthlyCalendarRequestBuilder getMonthlyCalendar(Integer personId, Integer year, Integer month) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        return new GetMonthlyCalendarRequestBuilder(personId, year, month);
    }
    private okhttp3.Call getOneOffWageComponentsByMonthCall(Integer personId, Integer year, Integer month, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/one_off/components/{person_id}/{year}/{month}/list"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneOffWageComponentsByMonthValidateBeforeCall(Integer personId, Integer year, Integer month, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getOneOffWageComponentsByMonth(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getOneOffWageComponentsByMonth(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getOneOffWageComponentsByMonth(Async)");
        }

        return getOneOffWageComponentsByMonthCall(personId, year, month, _callback);

    }


    private ApiResponse<PersonGetOneOffWageComponentsByMonthResponse> getOneOffWageComponentsByMonthWithHttpInfo(Integer personId, Integer year, Integer month) throws ApiException {
        okhttp3.Call localVarCall = getOneOffWageComponentsByMonthValidateBeforeCall(personId, year, month, null);
        Type localVarReturnType = new TypeToken<PersonGetOneOffWageComponentsByMonthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneOffWageComponentsByMonthAsync(Integer personId, Integer year, Integer month, final ApiCallback<PersonGetOneOffWageComponentsByMonthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneOffWageComponentsByMonthValidateBeforeCall(personId, year, month, _callback);
        Type localVarReturnType = new TypeToken<PersonGetOneOffWageComponentsByMonthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneOffWageComponentsByMonthRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private final Integer month;

        private GetOneOffWageComponentsByMonthRequestBuilder(Integer personId, Integer year, Integer month) {
            this.personId = personId;
            this.year = year;
            this.month = month;
        }

        /**
         * Build call for getOneOffWageComponentsByMonth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneOffWageComponentsByMonthCall(personId, year, month, _callback);
        }


        /**
         * Execute getOneOffWageComponentsByMonth request
         * @return PersonGetOneOffWageComponentsByMonthResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetOneOffWageComponentsByMonthResponse execute() throws ApiException {
            ApiResponse<PersonGetOneOffWageComponentsByMonthResponse> localVarResp = getOneOffWageComponentsByMonthWithHttpInfo(personId, year, month);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneOffWageComponentsByMonth request with HTTP info returned
         * @return ApiResponse&lt;PersonGetOneOffWageComponentsByMonthResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetOneOffWageComponentsByMonthResponse> executeWithHttpInfo() throws ApiException {
            return getOneOffWageComponentsByMonthWithHttpInfo(personId, year, month);
        }

        /**
         * Execute getOneOffWageComponentsByMonth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetOneOffWageComponentsByMonthResponse> _callback) throws ApiException {
            return getOneOffWageComponentsByMonthAsync(personId, year, month, _callback);
        }
    }

    /**
     * Components by person by month
     * Fetches the one-off wage components that are granted to a person on a specific month
     * @param personId  (required)
     * @param year  (required)
     * @param month  (required)
     * @return GetOneOffWageComponentsByMonthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetOneOffWageComponentsByMonthRequestBuilder getOneOffWageComponentsByMonth(Integer personId, Integer year, Integer month) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        return new GetOneOffWageComponentsByMonthRequestBuilder(personId, year, month);
    }
    private okhttp3.Call getPerformanceReviewsByPersonCall(Integer page, Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/performance_reviews/{person_id}/list"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPerformanceReviewsByPersonValidateBeforeCall(Integer page, Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getPerformanceReviewsByPerson(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getPerformanceReviewsByPerson(Async)");
        }

        return getPerformanceReviewsByPersonCall(page, personId, _callback);

    }


    private ApiResponse<String> getPerformanceReviewsByPersonWithHttpInfo(Integer page, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = getPerformanceReviewsByPersonValidateBeforeCall(page, personId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPerformanceReviewsByPersonAsync(Integer page, Integer personId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPerformanceReviewsByPersonValidateBeforeCall(page, personId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPerformanceReviewsByPersonRequestBuilder {
        private final Integer page;
        private final Integer personId;

        private GetPerformanceReviewsByPersonRequestBuilder(Integer page, Integer personId) {
            this.page = page;
            this.personId = personId;
        }

        /**
         * Build call for getPerformanceReviewsByPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPerformanceReviewsByPersonCall(page, personId, _callback);
        }


        /**
         * Execute getPerformanceReviewsByPerson request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getPerformanceReviewsByPersonWithHttpInfo(page, personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPerformanceReviewsByPerson request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getPerformanceReviewsByPersonWithHttpInfo(page, personId);
        }

        /**
         * Execute getPerformanceReviewsByPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getPerformanceReviewsByPersonAsync(page, personId, _callback);
        }
    }

    /**
     * List performance reviews
     * show metadata for performance reviews by person. No content (notes,..) are exposed
     * @param page Controls pagination (0, 1, 2, ..) to view all results. 30 items per page. (required)
     * @param personId  (required)
     * @return GetPerformanceReviewsByPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPerformanceReviewsByPersonRequestBuilder getPerformanceReviewsByPerson(Integer page, Integer personId) throws IllegalArgumentException {
        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new GetPerformanceReviewsByPersonRequestBuilder(page, personId);
    }
    private okhttp3.Call getPersonalDataChangesCall(OffsetDateTime sinceTimestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/change_history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_timestamp", sinceTimestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalDataChangesValidateBeforeCall(OffsetDateTime sinceTimestamp, final ApiCallback _callback) throws ApiException {
        return getPersonalDataChangesCall(sinceTimestamp, _callback);

    }


    private ApiResponse<PersonGetPersonalDataChangesResponse> getPersonalDataChangesWithHttpInfo(OffsetDateTime sinceTimestamp) throws ApiException {
        okhttp3.Call localVarCall = getPersonalDataChangesValidateBeforeCall(sinceTimestamp, null);
        Type localVarReturnType = new TypeToken<PersonGetPersonalDataChangesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalDataChangesAsync(OffsetDateTime sinceTimestamp, final ApiCallback<PersonGetPersonalDataChangesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalDataChangesValidateBeforeCall(sinceTimestamp, _callback);
        Type localVarReturnType = new TypeToken<PersonGetPersonalDataChangesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonalDataChangesRequestBuilder {
        private OffsetDateTime sinceTimestamp;

        private GetPersonalDataChangesRequestBuilder() {
        }

        /**
         * Set sinceTimestamp
         * @param sinceTimestamp Defaults to 1 week ago (optional)
         * @return GetPersonalDataChangesRequestBuilder
         */
        public GetPersonalDataChangesRequestBuilder sinceTimestamp(OffsetDateTime sinceTimestamp) {
            this.sinceTimestamp = sinceTimestamp;
            return this;
        }
        
        /**
         * Build call for getPersonalDataChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalDataChangesCall(sinceTimestamp, _callback);
        }


        /**
         * Execute getPersonalDataChanges request
         * @return PersonGetPersonalDataChangesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetPersonalDataChangesResponse execute() throws ApiException {
            ApiResponse<PersonGetPersonalDataChangesResponse> localVarResp = getPersonalDataChangesWithHttpInfo(sinceTimestamp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonalDataChanges request with HTTP info returned
         * @return ApiResponse&lt;PersonGetPersonalDataChangesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetPersonalDataChangesResponse> executeWithHttpInfo() throws ApiException {
            return getPersonalDataChangesWithHttpInfo(sinceTimestamp);
        }

        /**
         * Execute getPersonalDataChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetPersonalDataChangesResponse> _callback) throws ApiException {
            return getPersonalDataChangesAsync(sinceTimestamp, _callback);
        }
    }

    /**
     * Personal data audit log
     * Get the latest delta of changes to personal data
     * @return GetPersonalDataChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonalDataChangesRequestBuilder getPersonalDataChanges() throws IllegalArgumentException {
        return new GetPersonalDataChangesRequestBuilder();
    }
    private okhttp3.Call getVerzuimPeriodsCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/verzuim/{year}"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVerzuimPeriodsValidateBeforeCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getVerzuimPeriods(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getVerzuimPeriods(Async)");
        }

        return getVerzuimPeriodsCall(personId, year, _callback);

    }


    private ApiResponse<PersonGetVerzuimPeriodsResponse> getVerzuimPeriodsWithHttpInfo(Integer personId, Integer year) throws ApiException {
        okhttp3.Call localVarCall = getVerzuimPeriodsValidateBeforeCall(personId, year, null);
        Type localVarReturnType = new TypeToken<PersonGetVerzuimPeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVerzuimPeriodsAsync(Integer personId, Integer year, final ApiCallback<PersonGetVerzuimPeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVerzuimPeriodsValidateBeforeCall(personId, year, _callback);
        Type localVarReturnType = new TypeToken<PersonGetVerzuimPeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVerzuimPeriodsRequestBuilder {
        private final Integer personId;
        private final Integer year;

        private GetVerzuimPeriodsRequestBuilder(Integer personId, Integer year) {
            this.personId = personId;
            this.year = year;
        }

        /**
         * Build call for getVerzuimPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVerzuimPeriodsCall(personId, year, _callback);
        }


        /**
         * Execute getVerzuimPeriods request
         * @return PersonGetVerzuimPeriodsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetVerzuimPeriodsResponse execute() throws ApiException {
            ApiResponse<PersonGetVerzuimPeriodsResponse> localVarResp = getVerzuimPeriodsWithHttpInfo(personId, year);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVerzuimPeriods request with HTTP info returned
         * @return ApiResponse&lt;PersonGetVerzuimPeriodsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetVerzuimPeriodsResponse> executeWithHttpInfo() throws ApiException {
            return getVerzuimPeriodsWithHttpInfo(personId, year);
        }

        /**
         * Execute getVerzuimPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetVerzuimPeriodsResponse> _callback) throws ApiException {
            return getVerzuimPeriodsAsync(personId, year, _callback);
        }
    }

    /**
     * List verzuim periods
     * 
     * @param personId  (required)
     * @param year  (required)
     * @return GetVerzuimPeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetVerzuimPeriodsRequestBuilder getVerzuimPeriods(Integer personId, Integer year) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        return new GetVerzuimPeriodsRequestBuilder(personId, year);
    }
    private okhttp3.Call getWageHistoryCall(String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/{person_id}/history"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWageHistoryValidateBeforeCall(String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getWageHistory(Async)");
        }

        return getWageHistoryCall(personId, _callback);

    }


    private ApiResponse<PersonGetWageHistoryResponse> getWageHistoryWithHttpInfo(String personId) throws ApiException {
        okhttp3.Call localVarCall = getWageHistoryValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonGetWageHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWageHistoryAsync(String personId, final ApiCallback<PersonGetWageHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWageHistoryValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonGetWageHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWageHistoryRequestBuilder {
        private final String personId;

        private GetWageHistoryRequestBuilder(String personId) {
            this.personId = personId;
        }

        /**
         * Build call for getWageHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWageHistoryCall(personId, _callback);
        }


        /**
         * Execute getWageHistory request
         * @return PersonGetWageHistoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetWageHistoryResponse execute() throws ApiException {
            ApiResponse<PersonGetWageHistoryResponse> localVarResp = getWageHistoryWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWageHistory request with HTTP info returned
         * @return ApiResponse&lt;PersonGetWageHistoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetWageHistoryResponse> executeWithHttpInfo() throws ApiException {
            return getWageHistoryWithHttpInfo(personId);
        }

        /**
         * Execute getWageHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetWageHistoryResponse> _callback) throws ApiException {
            return getWageHistoryAsync(personId, _callback);
        }
    }

    /**
     * Wage history
     * Get the entire wage history for one person
     * @param personId The person you need the wage history for (required)
     * @return GetWageHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetWageHistoryRequestBuilder getWageHistory(String personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetWageHistoryRequestBuilder(personId);
    }
    private okhttp3.Call getYearlyCalendarCall(Integer personId, Integer year, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getYearlyCalendarValidateBeforeCall(Integer personId, Integer year, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getYearlyCalendar(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling getYearlyCalendar(Async)");
        }

        return getYearlyCalendarCall(personId, year, filter, _callback);

    }


    private ApiResponse<PersonGetYearlyCalendarResponse> getYearlyCalendarWithHttpInfo(Integer personId, Integer year, String filter) throws ApiException {
        okhttp3.Call localVarCall = getYearlyCalendarValidateBeforeCall(personId, year, filter, null);
        Type localVarReturnType = new TypeToken<PersonGetYearlyCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getYearlyCalendarAsync(Integer personId, Integer year, String filter, final ApiCallback<PersonGetYearlyCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getYearlyCalendarValidateBeforeCall(personId, year, filter, _callback);
        Type localVarReturnType = new TypeToken<PersonGetYearlyCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetYearlyCalendarRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private String filter;

        private GetYearlyCalendarRequestBuilder(Integer personId, Integer year) {
            this.personId = personId;
            this.year = year;
        }

        /**
         * Set filter
         * @param filter can be either &#39;all&#39; or &#39;days_with_events&#39; to return only days containing events (optional, default to all)
         * @return GetYearlyCalendarRequestBuilder
         */
        public GetYearlyCalendarRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getYearlyCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getYearlyCalendarCall(personId, year, filter, _callback);
        }


        /**
         * Execute getYearlyCalendar request
         * @return PersonGetYearlyCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonGetYearlyCalendarResponse execute() throws ApiException {
            ApiResponse<PersonGetYearlyCalendarResponse> localVarResp = getYearlyCalendarWithHttpInfo(personId, year, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getYearlyCalendar request with HTTP info returned
         * @return ApiResponse&lt;PersonGetYearlyCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonGetYearlyCalendarResponse> executeWithHttpInfo() throws ApiException {
            return getYearlyCalendarWithHttpInfo(personId, year, filter);
        }

        /**
         * Execute getYearlyCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonGetYearlyCalendarResponse> _callback) throws ApiException {
            return getYearlyCalendarAsync(personId, year, filter, _callback);
        }
    }

    /**
     * Yearly calendar
     * List the time off, overtime &amp; scheduled time for a single person for an entire year
     * @param personId The person you would like to receive calender information on (required)
     * @param year  (required)
     * @return GetYearlyCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetYearlyCalendarRequestBuilder getYearlyCalendar(Integer personId, Integer year) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        return new GetYearlyCalendarRequestBuilder(personId, year);
    }
    private okhttp3.Call listAvailableComponentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/one_off/components/{person_id}/options/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableComponentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAvailableComponentsCall(_callback);

    }


    private ApiResponse<PersonListAvailableComponentsResponse> listAvailableComponentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAvailableComponentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PersonListAvailableComponentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableComponentsAsync(final ApiCallback<PersonListAvailableComponentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableComponentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PersonListAvailableComponentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableComponentsRequestBuilder {

        private ListAvailableComponentsRequestBuilder() {
        }

        /**
         * Build call for listAvailableComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableComponentsCall(_callback);
        }


        /**
         * Execute listAvailableComponents request
         * @return PersonListAvailableComponentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonListAvailableComponentsResponse execute() throws ApiException {
            ApiResponse<PersonListAvailableComponentsResponse> localVarResp = listAvailableComponentsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableComponents request with HTTP info returned
         * @return ApiResponse&lt;PersonListAvailableComponentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonListAvailableComponentsResponse> executeWithHttpInfo() throws ApiException {
            return listAvailableComponentsWithHttpInfo();
        }

        /**
         * Execute listAvailableComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonListAvailableComponentsResponse> _callback) throws ApiException {
            return listAvailableComponentsAsync(_callback);
        }
    }

    /**
     * List available components
     * Fetches a list of available one-off wage components (eg bonus, expense compensation,..) for a specific person.
     * @return ListAvailableComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableComponentsRequestBuilder listAvailableComponents() throws IllegalArgumentException {
        return new ListAvailableComponentsRequestBuilder();
    }
    private okhttp3.Call listBudgetItemsCall(Integer personId, Integer budgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/budgets/people/{person_id}/{budget_id}/items/list"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBudgetItemsValidateBeforeCall(Integer personId, Integer budgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling listBudgetItems(Async)");
        }

        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling listBudgetItems(Async)");
        }

        return listBudgetItemsCall(personId, budgetId, _callback);

    }


    private ApiResponse<PersonListBudgetItemsResponse> listBudgetItemsWithHttpInfo(Integer personId, Integer budgetId) throws ApiException {
        okhttp3.Call localVarCall = listBudgetItemsValidateBeforeCall(personId, budgetId, null);
        Type localVarReturnType = new TypeToken<PersonListBudgetItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBudgetItemsAsync(Integer personId, Integer budgetId, final ApiCallback<PersonListBudgetItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBudgetItemsValidateBeforeCall(personId, budgetId, _callback);
        Type localVarReturnType = new TypeToken<PersonListBudgetItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBudgetItemsRequestBuilder {
        private final Integer personId;
        private final Integer budgetId;

        private ListBudgetItemsRequestBuilder(Integer personId, Integer budgetId) {
            this.personId = personId;
            this.budgetId = budgetId;
        }

        /**
         * Build call for listBudgetItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBudgetItemsCall(personId, budgetId, _callback);
        }


        /**
         * Execute listBudgetItems request
         * @return PersonListBudgetItemsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonListBudgetItemsResponse execute() throws ApiException {
            ApiResponse<PersonListBudgetItemsResponse> localVarResp = listBudgetItemsWithHttpInfo(personId, budgetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBudgetItems request with HTTP info returned
         * @return ApiResponse&lt;PersonListBudgetItemsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonListBudgetItemsResponse> executeWithHttpInfo() throws ApiException {
            return listBudgetItemsWithHttpInfo(personId, budgetId);
        }

        /**
         * Execute listBudgetItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonListBudgetItemsResponse> _callback) throws ApiException {
            return listBudgetItemsAsync(personId, budgetId, _callback);
        }
    }

    /**
     * List budget items
     * Lists the items that are in a given budget.
     * @param personId  (required)
     * @param budgetId  (required)
     * @return ListBudgetItemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListBudgetItemsRequestBuilder listBudgetItems(Integer personId, Integer budgetId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
        return new ListBudgetItemsRequestBuilder(personId, budgetId);
    }
    private okhttp3.Call listDimonasByPersonCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/legal/dimonas/{person_id}/list"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDimonasByPersonValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling listDimonasByPerson(Async)");
        }

        return listDimonasByPersonCall(personId, _callback);

    }


    private ApiResponse<PersonListDimonasByPersonResponse> listDimonasByPersonWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = listDimonasByPersonValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonListDimonasByPersonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDimonasByPersonAsync(Integer personId, final ApiCallback<PersonListDimonasByPersonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDimonasByPersonValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonListDimonasByPersonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDimonasByPersonRequestBuilder {
        private final Integer personId;

        private ListDimonasByPersonRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for listDimonasByPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDimonasByPersonCall(personId, _callback);
        }


        /**
         * Execute listDimonasByPerson request
         * @return PersonListDimonasByPersonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonListDimonasByPersonResponse execute() throws ApiException {
            ApiResponse<PersonListDimonasByPersonResponse> localVarResp = listDimonasByPersonWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDimonasByPerson request with HTTP info returned
         * @return ApiResponse&lt;PersonListDimonasByPersonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonListDimonasByPersonResponse> executeWithHttpInfo() throws ApiException {
            return listDimonasByPersonWithHttpInfo(personId);
        }

        /**
         * Execute listDimonasByPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonListDimonasByPersonResponse> _callback) throws ApiException {
            return listDimonasByPersonAsync(personId, _callback);
        }
    }

    /**
     * List dimonas by person
     * Belgium only: this API allows you to list all historical DIMONA information for one person
     * @param personId  (required)
     * @return ListDimonasByPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListDimonasByPersonRequestBuilder listDimonasByPerson(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new ListDimonasByPersonRequestBuilder(personId);
    }
    private okhttp3.Call listPeopleCall(Integer page, Integer includeArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_archived", includeArchived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPeopleValidateBeforeCall(Integer page, Integer includeArchived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listPeople(Async)");
        }

        return listPeopleCall(page, includeArchived, _callback);

    }


    private ApiResponse<PersonListPeopleResponse> listPeopleWithHttpInfo(Integer page, Integer includeArchived) throws ApiException {
        okhttp3.Call localVarCall = listPeopleValidateBeforeCall(page, includeArchived, null);
        Type localVarReturnType = new TypeToken<PersonListPeopleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPeopleAsync(Integer page, Integer includeArchived, final ApiCallback<PersonListPeopleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPeopleValidateBeforeCall(page, includeArchived, _callback);
        Type localVarReturnType = new TypeToken<PersonListPeopleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPeopleRequestBuilder {
        private final Integer page;
        private Integer includeArchived;

        private ListPeopleRequestBuilder(Integer page) {
            this.page = page;
        }

        /**
         * Set includeArchived
         * @param includeArchived Include archived people in response (optional, default to 0)
         * @return ListPeopleRequestBuilder
         */
        public ListPeopleRequestBuilder includeArchived(Integer includeArchived) {
            this.includeArchived = includeArchived;
            return this;
        }
        
        /**
         * Build call for listPeople
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPeopleCall(page, includeArchived, _callback);
        }


        /**
         * Execute listPeople request
         * @return PersonListPeopleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonListPeopleResponse execute() throws ApiException {
            ApiResponse<PersonListPeopleResponse> localVarResp = listPeopleWithHttpInfo(page, includeArchived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPeople request with HTTP info returned
         * @return ApiResponse&lt;PersonListPeopleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonListPeopleResponse> executeWithHttpInfo() throws ApiException {
            return listPeopleWithHttpInfo(page, includeArchived);
        }

        /**
         * Execute listPeople request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonListPeopleResponse> _callback) throws ApiException {
            return listPeopleAsync(page, includeArchived, _callback);
        }
    }

    /**
     * List people
     * 
     * @param page Controls pagination (0, 1, 2, ..) to view all results. 30 items per page. (required)
     * @return ListPeopleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListPeopleRequestBuilder listPeople(Integer page) throws IllegalArgumentException {
        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        return new ListPeopleRequestBuilder(page);
    }
    private okhttp3.Call overwriteEventCall(String personId, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}/{month}/{day}/events/set"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overwriteEventValidateBeforeCall(String personId, String year, String month, String day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling overwriteEvent(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling overwriteEvent(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling overwriteEvent(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling overwriteEvent(Async)");
        }

        return overwriteEventCall(personId, year, month, day, _callback);

    }


    private ApiResponse<PersonOverwriteEventResponse> overwriteEventWithHttpInfo(String personId, String year, String month, String day) throws ApiException {
        okhttp3.Call localVarCall = overwriteEventValidateBeforeCall(personId, year, month, day, null);
        Type localVarReturnType = new TypeToken<PersonOverwriteEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call overwriteEventAsync(String personId, String year, String month, String day, final ApiCallback<PersonOverwriteEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = overwriteEventValidateBeforeCall(personId, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<PersonOverwriteEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OverwriteEventRequestBuilder {
        private final String personId;
        private final String year;
        private final String month;
        private final String day;

        private OverwriteEventRequestBuilder(String personId, String year, String month, String day) {
            this.personId = personId;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for overwriteEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return overwriteEventCall(personId, year, month, day, _callback);
        }


        /**
         * Execute overwriteEvent request
         * @return PersonOverwriteEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonOverwriteEventResponse execute() throws ApiException {
            ApiResponse<PersonOverwriteEventResponse> localVarResp = overwriteEventWithHttpInfo(personId, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute overwriteEvent request with HTTP info returned
         * @return ApiResponse&lt;PersonOverwriteEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonOverwriteEventResponse> executeWithHttpInfo() throws ApiException {
            return overwriteEventWithHttpInfo(personId, year, month, day);
        }

        /**
         * Execute overwriteEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonOverwriteEventResponse> _callback) throws ApiException {
            return overwriteEventAsync(personId, year, month, day, _callback);
        }
    }

    /**
     * Overwrite event
     * Create a new event or overwrite an existing one in a personal calender (eg a day off, overtime,..)
     * @param personId  (required)
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @return OverwriteEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public OverwriteEventRequestBuilder overwriteEvent(String personId, String year, String month, String day) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
            

        return new OverwriteEventRequestBuilder(personId, year, month, day);
    }
    private okhttp3.Call removeEventCall(Integer personId, Integer eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/events/{event_id}"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEventValidateBeforeCall(Integer personId, Integer eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling removeEvent(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling removeEvent(Async)");
        }

        return removeEventCall(personId, eventId, _callback);

    }


    private ApiResponse<PersonRemoveEventResponse> removeEventWithHttpInfo(Integer personId, Integer eventId) throws ApiException {
        okhttp3.Call localVarCall = removeEventValidateBeforeCall(personId, eventId, null);
        Type localVarReturnType = new TypeToken<PersonRemoveEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEventAsync(Integer personId, Integer eventId, final ApiCallback<PersonRemoveEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEventValidateBeforeCall(personId, eventId, _callback);
        Type localVarReturnType = new TypeToken<PersonRemoveEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEventRequestBuilder {
        private final Integer personId;
        private final Integer eventId;

        private RemoveEventRequestBuilder(Integer personId, Integer eventId) {
            this.personId = personId;
            this.eventId = eventId;
        }

        /**
         * Build call for removeEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEventCall(personId, eventId, _callback);
        }


        /**
         * Execute removeEvent request
         * @return PersonRemoveEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonRemoveEventResponse execute() throws ApiException {
            ApiResponse<PersonRemoveEventResponse> localVarResp = removeEventWithHttpInfo(personId, eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEvent request with HTTP info returned
         * @return ApiResponse&lt;PersonRemoveEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonRemoveEventResponse> executeWithHttpInfo() throws ApiException {
            return removeEventWithHttpInfo(personId, eventId);
        }

        /**
         * Execute removeEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonRemoveEventResponse> _callback) throws ApiException {
            return removeEventAsync(personId, eventId, _callback);
        }
    }

    /**
     * Delete event
     * Remove an event from the calender, such as a day off
     * @param personId  (required)
     * @param eventId  (required)
     * @return RemoveEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEventRequestBuilder removeEvent(Integer personId, Integer eventId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
        return new RemoveEventRequestBuilder(personId, eventId);
    }
    private okhttp3.Call resetTimeWorkedCall(Integer personId, Integer year, Integer month, Integer day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}/{month}/{day}/work/reset"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetTimeWorkedValidateBeforeCall(Integer personId, Integer year, Integer month, Integer day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling resetTimeWorked(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling resetTimeWorked(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling resetTimeWorked(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling resetTimeWorked(Async)");
        }

        return resetTimeWorkedCall(personId, year, month, day, _callback);

    }


    private ApiResponse<Object> resetTimeWorkedWithHttpInfo(Integer personId, Integer year, Integer month, Integer day) throws ApiException {
        okhttp3.Call localVarCall = resetTimeWorkedValidateBeforeCall(personId, year, month, day, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetTimeWorkedAsync(Integer personId, Integer year, Integer month, Integer day, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetTimeWorkedValidateBeforeCall(personId, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResetTimeWorkedRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private final Integer month;
        private final Integer day;

        private ResetTimeWorkedRequestBuilder(Integer personId, Integer year, Integer month, Integer day) {
            this.personId = personId;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for resetTimeWorked
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetTimeWorkedCall(personId, year, month, day, _callback);
        }


        /**
         * Execute resetTimeWorked request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = resetTimeWorkedWithHttpInfo(personId, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resetTimeWorked request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return resetTimeWorkedWithHttpInfo(personId, year, month, day);
        }

        /**
         * Execute resetTimeWorked request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return resetTimeWorkedAsync(personId, year, month, day, _callback);
        }
    }

    /**
     * Reset time worked
     * reset the time worked on a given day to the regular work schedule for one person
     * @param personId  (required)
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @return ResetTimeWorkedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ResetTimeWorkedRequestBuilder resetTimeWorked(Integer personId, Integer year, Integer month, Integer day) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
        return new ResetTimeWorkedRequestBuilder(personId, year, month, day);
    }
    private okhttp3.Call searchByCriteriaCall(String name, String email, String nationalNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (nationalNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("national_number", nationalNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchByCriteriaValidateBeforeCall(String name, String email, String nationalNumber, final ApiCallback _callback) throws ApiException {
        return searchByCriteriaCall(name, email, nationalNumber, _callback);

    }


    private ApiResponse<List<PersonSearchByCriteriaResponseInner>> searchByCriteriaWithHttpInfo(String name, String email, String nationalNumber) throws ApiException {
        okhttp3.Call localVarCall = searchByCriteriaValidateBeforeCall(name, email, nationalNumber, null);
        Type localVarReturnType = new TypeToken<List<PersonSearchByCriteriaResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchByCriteriaAsync(String name, String email, String nationalNumber, final ApiCallback<List<PersonSearchByCriteriaResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchByCriteriaValidateBeforeCall(name, email, nationalNumber, _callback);
        Type localVarReturnType = new TypeToken<List<PersonSearchByCriteriaResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchByCriteriaRequestBuilder {
        private String name;
        private String email;
        private String nationalNumber;

        private SearchByCriteriaRequestBuilder() {
        }

        /**
         * Set name
         * @param name eg John Doe (optional)
         * @return SearchByCriteriaRequestBuilder
         */
        public SearchByCriteriaRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set email
         * @param email eg john@doe.net (optional)
         * @return SearchByCriteriaRequestBuilder
         */
        public SearchByCriteriaRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set nationalNumber
         * @param nationalNumber eg 82146126684 (optional)
         * @return SearchByCriteriaRequestBuilder
         */
        public SearchByCriteriaRequestBuilder nationalNumber(String nationalNumber) {
            this.nationalNumber = nationalNumber;
            return this;
        }
        
        /**
         * Build call for searchByCriteria
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchByCriteriaCall(name, email, nationalNumber, _callback);
        }


        /**
         * Execute searchByCriteria request
         * @return List&lt;PersonSearchByCriteriaResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<PersonSearchByCriteriaResponseInner> execute() throws ApiException {
            ApiResponse<List<PersonSearchByCriteriaResponseInner>> localVarResp = searchByCriteriaWithHttpInfo(name, email, nationalNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchByCriteria request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PersonSearchByCriteriaResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PersonSearchByCriteriaResponseInner>> executeWithHttpInfo() throws ApiException {
            return searchByCriteriaWithHttpInfo(name, email, nationalNumber);
        }

        /**
         * Execute searchByCriteria request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PersonSearchByCriteriaResponseInner>> _callback) throws ApiException {
            return searchByCriteriaAsync(name, email, nationalNumber, _callback);
        }
    }

    /**
     * Search people
     * search people by name, email or national number
     * @return SearchByCriteriaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SearchByCriteriaRequestBuilder searchByCriteria() throws IllegalArgumentException {
        return new SearchByCriteriaRequestBuilder();
    }
    private okhttp3.Call setFunctionDescriptionCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/role"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setFunctionDescriptionValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling setFunctionDescription(Async)");
        }

        return setFunctionDescriptionCall(personId, _callback);

    }


    private ApiResponse<PersonSetFunctionDescriptionResponse> setFunctionDescriptionWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = setFunctionDescriptionValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonSetFunctionDescriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setFunctionDescriptionAsync(Integer personId, final ApiCallback<PersonSetFunctionDescriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setFunctionDescriptionValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonSetFunctionDescriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetFunctionDescriptionRequestBuilder {
        private final Integer personId;

        private SetFunctionDescriptionRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for setFunctionDescription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setFunctionDescriptionCall(personId, _callback);
        }


        /**
         * Execute setFunctionDescription request
         * @return PersonSetFunctionDescriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonSetFunctionDescriptionResponse execute() throws ApiException {
            ApiResponse<PersonSetFunctionDescriptionResponse> localVarResp = setFunctionDescriptionWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setFunctionDescription request with HTTP info returned
         * @return ApiResponse&lt;PersonSetFunctionDescriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonSetFunctionDescriptionResponse> executeWithHttpInfo() throws ApiException {
            return setFunctionDescriptionWithHttpInfo(personId);
        }

        /**
         * Execute setFunctionDescription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonSetFunctionDescriptionResponse> _callback) throws ApiException {
            return setFunctionDescriptionAsync(personId, _callback);
        }
    }

    /**
     * Update role
     * Set the function description for each person
     * @param personId  (required)
     * @return SetFunctionDescriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SetFunctionDescriptionRequestBuilder setFunctionDescription(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new SetFunctionDescriptionRequestBuilder(personId);
    }
    private okhttp3.Call updateBulkTimeWorkedCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}/work/bulk"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBulkTimeWorkedValidateBeforeCall(Integer personId, Integer year, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateBulkTimeWorked(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling updateBulkTimeWorked(Async)");
        }

        return updateBulkTimeWorkedCall(personId, year, _callback);

    }


    private ApiResponse<Object> updateBulkTimeWorkedWithHttpInfo(Integer personId, Integer year) throws ApiException {
        okhttp3.Call localVarCall = updateBulkTimeWorkedValidateBeforeCall(personId, year, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBulkTimeWorkedAsync(Integer personId, Integer year, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBulkTimeWorkedValidateBeforeCall(personId, year, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBulkTimeWorkedRequestBuilder {
        private final Integer personId;
        private final Integer year;

        private UpdateBulkTimeWorkedRequestBuilder(Integer personId, Integer year) {
            this.personId = personId;
            this.year = year;
        }

        /**
         * Build call for updateBulkTimeWorked
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateBulkTimeWorkedCall(personId, year, _callback);
        }


        /**
         * Execute updateBulkTimeWorked request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = updateBulkTimeWorkedWithHttpInfo(personId, year);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBulkTimeWorked request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return updateBulkTimeWorkedWithHttpInfo(personId, year);
        }

        /**
         * Execute updateBulkTimeWorked request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return updateBulkTimeWorkedAsync(personId, year, _callback);
        }
    }

    /**
     * Update time worked in bulk
     * Overwrite the amount of time worked for a set of days in bulk (eg for timetracking software integrations)
     * @param personId  (required)
     * @param year  (required)
     * @return UpdateBulkTimeWorkedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBulkTimeWorkedRequestBuilder updateBulkTimeWorked(Integer personId, Integer year) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        return new UpdateBulkTimeWorkedRequestBuilder(personId, year);
    }
    private okhttp3.Call updateEventTypeLimitCall(Integer personId, Integer year, Integer typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/events/types/{year}/limits/{type_id}/set"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "type_id" + "}", localVarApiClient.escapeString(typeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventTypeLimitValidateBeforeCall(Integer personId, Integer year, Integer typeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateEventTypeLimit(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling updateEventTypeLimit(Async)");
        }

        // verify the required parameter 'typeId' is set
        if (typeId == null) {
            throw new ApiException("Missing the required parameter 'typeId' when calling updateEventTypeLimit(Async)");
        }

        return updateEventTypeLimitCall(personId, year, typeId, _callback);

    }


    private ApiResponse<PersonUpdateEventTypeLimitResponse> updateEventTypeLimitWithHttpInfo(Integer personId, Integer year, Integer typeId) throws ApiException {
        okhttp3.Call localVarCall = updateEventTypeLimitValidateBeforeCall(personId, year, typeId, null);
        Type localVarReturnType = new TypeToken<PersonUpdateEventTypeLimitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEventTypeLimitAsync(Integer personId, Integer year, Integer typeId, final ApiCallback<PersonUpdateEventTypeLimitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventTypeLimitValidateBeforeCall(personId, year, typeId, _callback);
        Type localVarReturnType = new TypeToken<PersonUpdateEventTypeLimitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEventTypeLimitRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private final Integer typeId;

        private UpdateEventTypeLimitRequestBuilder(Integer personId, Integer year, Integer typeId) {
            this.personId = personId;
            this.year = year;
            this.typeId = typeId;
        }

        /**
         * Build call for updateEventTypeLimit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateEventTypeLimitCall(personId, year, typeId, _callback);
        }


        /**
         * Execute updateEventTypeLimit request
         * @return PersonUpdateEventTypeLimitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonUpdateEventTypeLimitResponse execute() throws ApiException {
            ApiResponse<PersonUpdateEventTypeLimitResponse> localVarResp = updateEventTypeLimitWithHttpInfo(personId, year, typeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEventTypeLimit request with HTTP info returned
         * @return ApiResponse&lt;PersonUpdateEventTypeLimitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonUpdateEventTypeLimitResponse> executeWithHttpInfo() throws ApiException {
            return updateEventTypeLimitWithHttpInfo(personId, year, typeId);
        }

        /**
         * Execute updateEventTypeLimit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonUpdateEventTypeLimitResponse> _callback) throws ApiException {
            return updateEventTypeLimitAsync(personId, year, typeId, _callback);
        }
    }

    /**
     * Set event type limit
     * This API can update the limitations for a specific event type
     * @param personId  (required)
     * @param year  (required)
     * @param typeId  (required)
     * @return UpdateEventTypeLimitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventTypeLimitRequestBuilder updateEventTypeLimit(Integer personId, Integer year, Integer typeId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (typeId == null) throw new IllegalArgumentException("\"typeId\" is required but got null");
        return new UpdateEventTypeLimitRequestBuilder(personId, year, typeId);
    }
    private okhttp3.Call updateManagerCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/manager"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateManagerValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateManager(Async)");
        }

        return updateManagerCall(personId, _callback);

    }


    private ApiResponse<PersonUpdateManagerResponse> updateManagerWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = updateManagerValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonUpdateManagerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateManagerAsync(Integer personId, final ApiCallback<PersonUpdateManagerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateManagerValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonUpdateManagerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateManagerRequestBuilder {
        private final Integer personId;

        private UpdateManagerRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for updateManager
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateManagerCall(personId, _callback);
        }


        /**
         * Execute updateManager request
         * @return PersonUpdateManagerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonUpdateManagerResponse execute() throws ApiException {
            ApiResponse<PersonUpdateManagerResponse> localVarResp = updateManagerWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateManager request with HTTP info returned
         * @return ApiResponse&lt;PersonUpdateManagerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonUpdateManagerResponse> executeWithHttpInfo() throws ApiException {
            return updateManagerWithHttpInfo(personId);
        }

        /**
         * Execute updateManager request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonUpdateManagerResponse> _callback) throws ApiException {
            return updateManagerAsync(personId, _callback);
        }
    }

    /**
     * Update manager
     * Who reports to who?
     * @param personId  (required)
     * @return UpdateManagerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateManagerRequestBuilder updateManager(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new UpdateManagerRequestBuilder(personId);
    }
    private okhttp3.Call updateTimeWorkedCall(Integer personId, Integer year, Integer month, Integer day, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/calendar/{person_id}/{year}/{month}/{day}/work"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "day" + "}", localVarApiClient.escapeString(day.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeWorkedValidateBeforeCall(Integer personId, Integer year, Integer month, Integer day, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateTimeWorked(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling updateTimeWorked(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling updateTimeWorked(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling updateTimeWorked(Async)");
        }

        return updateTimeWorkedCall(personId, year, month, day, _callback);

    }


    private ApiResponse<PersonUpdateTimeWorkedResponse> updateTimeWorkedWithHttpInfo(Integer personId, Integer year, Integer month, Integer day) throws ApiException {
        okhttp3.Call localVarCall = updateTimeWorkedValidateBeforeCall(personId, year, month, day, null);
        Type localVarReturnType = new TypeToken<PersonUpdateTimeWorkedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimeWorkedAsync(Integer personId, Integer year, Integer month, Integer day, final ApiCallback<PersonUpdateTimeWorkedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeWorkedValidateBeforeCall(personId, year, month, day, _callback);
        Type localVarReturnType = new TypeToken<PersonUpdateTimeWorkedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTimeWorkedRequestBuilder {
        private final Integer personId;
        private final Integer year;
        private final Integer month;
        private final Integer day;

        private UpdateTimeWorkedRequestBuilder(Integer personId, Integer year, Integer month, Integer day) {
            this.personId = personId;
            this.year = year;
            this.month = month;
            this.day = day;
        }

        /**
         * Build call for updateTimeWorked
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateTimeWorkedCall(personId, year, month, day, _callback);
        }


        /**
         * Execute updateTimeWorked request
         * @return PersonUpdateTimeWorkedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonUpdateTimeWorkedResponse execute() throws ApiException {
            ApiResponse<PersonUpdateTimeWorkedResponse> localVarResp = updateTimeWorkedWithHttpInfo(personId, year, month, day);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTimeWorked request with HTTP info returned
         * @return ApiResponse&lt;PersonUpdateTimeWorkedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonUpdateTimeWorkedResponse> executeWithHttpInfo() throws ApiException {
            return updateTimeWorkedWithHttpInfo(personId, year, month, day);
        }

        /**
         * Execute updateTimeWorked request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonUpdateTimeWorkedResponse> _callback) throws ApiException {
            return updateTimeWorkedAsync(personId, year, month, day, _callback);
        }
    }

    /**
     * Update time worked
     * Overwrite the amount of time worked on a certain day (eg for timetracking software integrations)
     * @param personId  (required)
     * @param year  (required)
     * @param month  (required)
     * @param day  (required)
     * @return UpdateTimeWorkedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimeWorkedRequestBuilder updateTimeWorked(Integer personId, Integer year, Integer month, Integer day) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        if (day == null) throw new IllegalArgumentException("\"day\" is required but got null");
        return new UpdateTimeWorkedRequestBuilder(personId, year, month, day);
    }
    private okhttp3.Call uploadAvatarCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/people/{person_id}/photo"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAvatarValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling uploadAvatar(Async)");
        }

        return uploadAvatarCall(personId, _callback);

    }


    private ApiResponse<PersonUploadAvatarResponse> uploadAvatarWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = uploadAvatarValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonUploadAvatarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAvatarAsync(Integer personId, final ApiCallback<PersonUploadAvatarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAvatarValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonUploadAvatarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadAvatarRequestBuilder {
        private final Integer personId;

        private UploadAvatarRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for uploadAvatar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadAvatarCall(personId, _callback);
        }


        /**
         * Execute uploadAvatar request
         * @return PersonUploadAvatarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonUploadAvatarResponse execute() throws ApiException {
            ApiResponse<PersonUploadAvatarResponse> localVarResp = uploadAvatarWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadAvatar request with HTTP info returned
         * @return ApiResponse&lt;PersonUploadAvatarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonUploadAvatarResponse> executeWithHttpInfo() throws ApiException {
            return uploadAvatarWithHttpInfo(personId);
        }

        /**
         * Execute uploadAvatar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonUploadAvatarResponse> _callback) throws ApiException {
            return uploadAvatarAsync(personId, _callback);
        }
    }

    /**
     * Upload avatar
     * upload a photo of this person
     * @param personId  (required)
     * @return UploadAvatarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UploadAvatarRequestBuilder uploadAvatar(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new UploadAvatarRequestBuilder(personId);
    }
    private okhttp3.Call viewRoleHistoryCall(Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/roles/{person_id}/history"
            .replace("{" + "person_id" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewRoleHistoryValidateBeforeCall(Integer personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling viewRoleHistory(Async)");
        }

        return viewRoleHistoryCall(personId, _callback);

    }


    private ApiResponse<PersonViewRoleHistoryResponse> viewRoleHistoryWithHttpInfo(Integer personId) throws ApiException {
        okhttp3.Call localVarCall = viewRoleHistoryValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<PersonViewRoleHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call viewRoleHistoryAsync(Integer personId, final ApiCallback<PersonViewRoleHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewRoleHistoryValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<PersonViewRoleHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ViewRoleHistoryRequestBuilder {
        private final Integer personId;

        private ViewRoleHistoryRequestBuilder(Integer personId) {
            this.personId = personId;
        }

        /**
         * Build call for viewRoleHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return viewRoleHistoryCall(personId, _callback);
        }


        /**
         * Execute viewRoleHistory request
         * @return PersonViewRoleHistoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public PersonViewRoleHistoryResponse execute() throws ApiException {
            ApiResponse<PersonViewRoleHistoryResponse> localVarResp = viewRoleHistoryWithHttpInfo(personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute viewRoleHistory request with HTTP info returned
         * @return ApiResponse&lt;PersonViewRoleHistoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonViewRoleHistoryResponse> executeWithHttpInfo() throws ApiException {
            return viewRoleHistoryWithHttpInfo(personId);
        }

        /**
         * Execute viewRoleHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonViewRoleHistoryResponse> _callback) throws ApiException {
            return viewRoleHistoryAsync(personId, _callback);
        }
    }

    /**
     * Role History
     * View the role history for one person
     * @param personId  (required)
     * @return ViewRoleHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ViewRoleHistoryRequestBuilder viewRoleHistory(Integer personId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
        return new ViewRoleHistoryRequestBuilder(personId);
    }
}
