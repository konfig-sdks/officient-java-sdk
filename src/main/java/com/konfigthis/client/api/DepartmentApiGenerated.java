/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DepartmentGetAllDepartmentsResponseInner;
import com.konfigthis.client.model.DepartmentGetDetailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DepartmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllDepartmentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/departments/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDepartmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllDepartmentsCall(_callback);

    }


    private ApiResponse<List<DepartmentGetAllDepartmentsResponseInner>> getAllDepartmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllDepartmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DepartmentGetAllDepartmentsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDepartmentsAsync(final ApiCallback<List<DepartmentGetAllDepartmentsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDepartmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DepartmentGetAllDepartmentsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDepartmentsRequestBuilder {

        private GetAllDepartmentsRequestBuilder() {
        }

        /**
         * Build call for getAllDepartments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDepartmentsCall(_callback);
        }


        /**
         * Execute getAllDepartments request
         * @return List&lt;DepartmentGetAllDepartmentsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<DepartmentGetAllDepartmentsResponseInner> execute() throws ApiException {
            ApiResponse<List<DepartmentGetAllDepartmentsResponseInner>> localVarResp = getAllDepartmentsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDepartments request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DepartmentGetAllDepartmentsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DepartmentGetAllDepartmentsResponseInner>> executeWithHttpInfo() throws ApiException {
            return getAllDepartmentsWithHttpInfo();
        }

        /**
         * Execute getAllDepartments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DepartmentGetAllDepartmentsResponseInner>> _callback) throws ApiException {
            return getAllDepartmentsAsync(_callback);
        }
    }

    /**
     * List departments
     * Get the details of all functions or that of a single one
     * @return GetAllDepartmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDepartmentsRequestBuilder getAllDepartments() throws IllegalArgumentException {
        return new GetAllDepartmentsRequestBuilder();
    }
    private okhttp3.Call getDetailCall(String internalCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/departments/detail/{internal_code}"
            .replace("{" + "internal_code" + "}", localVarApiClient.escapeString(internalCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailValidateBeforeCall(String internalCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'internalCode' is set
        if (internalCode == null) {
            throw new ApiException("Missing the required parameter 'internalCode' when calling getDetail(Async)");
        }

        return getDetailCall(internalCode, _callback);

    }


    private ApiResponse<DepartmentGetDetailResponse> getDetailWithHttpInfo(String internalCode) throws ApiException {
        okhttp3.Call localVarCall = getDetailValidateBeforeCall(internalCode, null);
        Type localVarReturnType = new TypeToken<DepartmentGetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailAsync(String internalCode, final ApiCallback<DepartmentGetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailValidateBeforeCall(internalCode, _callback);
        Type localVarReturnType = new TypeToken<DepartmentGetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailRequestBuilder {
        private final String internalCode;

        private GetDetailRequestBuilder(String internalCode) {
            this.internalCode = internalCode;
        }

        /**
         * Build call for getDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailCall(internalCode, _callback);
        }


        /**
         * Execute getDetail request
         * @return DepartmentGetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentGetDetailResponse execute() throws ApiException {
            ApiResponse<DepartmentGetDetailResponse> localVarResp = getDetailWithHttpInfo(internalCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetail request with HTTP info returned
         * @return ApiResponse&lt;DepartmentGetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentGetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getDetailWithHttpInfo(internalCode);
        }

        /**
         * Execute getDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentGetDetailResponse> _callback) throws ApiException {
            return getDetailAsync(internalCode, _callback);
        }
    }

    /**
     * Department detail
     * Get the details of all functions or that of a single one
     * @param internalCode The internal code / GUID of the function you would like to receive information on (required)
     * @return GetDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailRequestBuilder getDetail(String internalCode) throws IllegalArgumentException {
        if (internalCode == null) throw new IllegalArgumentException("\"internalCode\" is required but got null");
            

        return new GetDetailRequestBuilder(internalCode);
    }
}
