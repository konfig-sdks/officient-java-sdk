/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldEditValueForObjectResponse;
import com.konfigthis.client.model.CustomFieldListFieldsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call editValueForObjectCall(Integer customFieldId, String objectType, Integer objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/custom_fields/{custom_field_id}/{object_type}/{object_id}"
            .replace("{" + "custom_field_id" + "}", localVarApiClient.escapeString(customFieldId.toString()))
            .replace("{" + "object_type" + "}", localVarApiClient.escapeString(objectType.toString()))
            .replace("{" + "object_id" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editValueForObjectValidateBeforeCall(Integer customFieldId, String objectType, Integer objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling editValueForObject(Async)");
        }

        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling editValueForObject(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling editValueForObject(Async)");
        }

        return editValueForObjectCall(customFieldId, objectType, objectId, _callback);

    }


    private ApiResponse<CustomFieldEditValueForObjectResponse> editValueForObjectWithHttpInfo(Integer customFieldId, String objectType, Integer objectId) throws ApiException {
        okhttp3.Call localVarCall = editValueForObjectValidateBeforeCall(customFieldId, objectType, objectId, null);
        Type localVarReturnType = new TypeToken<CustomFieldEditValueForObjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editValueForObjectAsync(Integer customFieldId, String objectType, Integer objectId, final ApiCallback<CustomFieldEditValueForObjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editValueForObjectValidateBeforeCall(customFieldId, objectType, objectId, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldEditValueForObjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditValueForObjectRequestBuilder {
        private final Integer customFieldId;
        private final String objectType;
        private final Integer objectId;

        private EditValueForObjectRequestBuilder(Integer customFieldId, String objectType, Integer objectId) {
            this.customFieldId = customFieldId;
            this.objectType = objectType;
            this.objectId = objectId;
        }

        /**
         * Build call for editValueForObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return editValueForObjectCall(customFieldId, objectType, objectId, _callback);
        }


        /**
         * Execute editValueForObject request
         * @return CustomFieldEditValueForObjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldEditValueForObjectResponse execute() throws ApiException {
            ApiResponse<CustomFieldEditValueForObjectResponse> localVarResp = editValueForObjectWithHttpInfo(customFieldId, objectType, objectId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editValueForObject request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldEditValueForObjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldEditValueForObjectResponse> executeWithHttpInfo() throws ApiException {
            return editValueForObjectWithHttpInfo(customFieldId, objectType, objectId);
        }

        /**
         * Execute editValueForObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldEditValueForObjectResponse> _callback) throws ApiException {
            return editValueForObjectAsync(customFieldId, objectType, objectId, _callback);
        }
    }

    /**
     * Edit custom field value
     * Update the custom field value for a specific object (either a person, car, asset, contract,..)
     * @param customFieldId Id of the custom field (required)
     * @param objectType type of object to be edited. It can be: employee, asset, car, contract, software_license, training_participant, training (required)
     * @param objectId ID of the object to be edited (required)
     * @return EditValueForObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public EditValueForObjectRequestBuilder editValueForObject(Integer customFieldId, String objectType, Integer objectId) throws IllegalArgumentException {
        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
        if (objectType == null) throw new IllegalArgumentException("\"objectType\" is required but got null");
            

        if (objectId == null) throw new IllegalArgumentException("\"objectId\" is required but got null");
        return new EditValueForObjectRequestBuilder(customFieldId, objectType, objectId);
    }
    private okhttp3.Call listFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/custom_fields/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listFieldsCall(_callback);

    }


    private ApiResponse<CustomFieldListFieldsResponse> listFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomFieldListFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFieldsAsync(final ApiCallback<CustomFieldListFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomFieldListFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFieldsRequestBuilder {

        private ListFieldsRequestBuilder() {
        }

        /**
         * Build call for listFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFieldsCall(_callback);
        }


        /**
         * Execute listFields request
         * @return CustomFieldListFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldListFieldsResponse execute() throws ApiException {
            ApiResponse<CustomFieldListFieldsResponse> localVarResp = listFieldsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFields request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldListFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldListFieldsResponse> executeWithHttpInfo() throws ApiException {
            return listFieldsWithHttpInfo();
        }

        /**
         * Execute listFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldListFieldsResponse> _callback) throws ApiException {
            return listFieldsAsync(_callback);
        }
    }

    /**
     * List custom fields
     * List all custom fields in a given account
     * @return ListFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListFieldsRequestBuilder listFields() throws IllegalArgumentException {
        return new ListFieldsRequestBuilder();
    }
}
