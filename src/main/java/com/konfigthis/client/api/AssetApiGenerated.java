/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssetAddCustomTypeResponse;
import com.konfigthis.client.model.AssetCreateNewAssetResponse;
import com.konfigthis.client.model.AssetGetCustomTypesListResponse;
import com.konfigthis.client.model.AssetGetDetailResponse;
import com.konfigthis.client.model.AssetListAssetsResponse;
import com.konfigthis.client.model.AssetRemoveCustomTypeResponse;
import com.konfigthis.client.model.AssetRemoveResponse;
import com.konfigthis.client.model.AssetUpdateAssetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AssetApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AssetApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCustomTypeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/types/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomTypeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return addCustomTypeCall(_callback);

    }


    private ApiResponse<AssetAddCustomTypeResponse> addCustomTypeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = addCustomTypeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AssetAddCustomTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCustomTypeAsync(final ApiCallback<AssetAddCustomTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomTypeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AssetAddCustomTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCustomTypeRequestBuilder {

        private AddCustomTypeRequestBuilder() {
        }

        /**
         * Build call for addCustomType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addCustomTypeCall(_callback);
        }


        /**
         * Execute addCustomType request
         * @return AssetAddCustomTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetAddCustomTypeResponse execute() throws ApiException {
            ApiResponse<AssetAddCustomTypeResponse> localVarResp = addCustomTypeWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCustomType request with HTTP info returned
         * @return ApiResponse&lt;AssetAddCustomTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetAddCustomTypeResponse> executeWithHttpInfo() throws ApiException {
            return addCustomTypeWithHttpInfo();
        }

        /**
         * Execute addCustomType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetAddCustomTypeResponse> _callback) throws ApiException {
            return addCustomTypeAsync(_callback);
        }
    }

    /**
     * Add custom asset type
     * 
     * @return AddCustomTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddCustomTypeRequestBuilder addCustomType() throws IllegalArgumentException {
        return new AddCustomTypeRequestBuilder();
    }
    private okhttp3.Call createNewAssetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAssetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createNewAssetCall(_callback);

    }


    private ApiResponse<AssetCreateNewAssetResponse> createNewAssetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createNewAssetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AssetCreateNewAssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAssetAsync(final ApiCallback<AssetCreateNewAssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAssetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AssetCreateNewAssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAssetRequestBuilder {

        private CreateNewAssetRequestBuilder() {
        }

        /**
         * Build call for createNewAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewAssetCall(_callback);
        }


        /**
         * Execute createNewAsset request
         * @return AssetCreateNewAssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetCreateNewAssetResponse execute() throws ApiException {
            ApiResponse<AssetCreateNewAssetResponse> localVarResp = createNewAssetWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetCreateNewAssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetCreateNewAssetResponse> executeWithHttpInfo() throws ApiException {
            return createNewAssetWithHttpInfo();
        }

        /**
         * Execute createNewAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetCreateNewAssetResponse> _callback) throws ApiException {
            return createNewAssetAsync(_callback);
        }
    }

    /**
     * Add asset
     * 
     * @return CreateNewAssetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAssetRequestBuilder createNewAsset() throws IllegalArgumentException {
        return new CreateNewAssetRequestBuilder();
    }
    private okhttp3.Call getCustomTypesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/types/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomTypesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomTypesListCall(_callback);

    }


    private ApiResponse<AssetGetCustomTypesListResponse> getCustomTypesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomTypesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AssetGetCustomTypesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomTypesListAsync(final ApiCallback<AssetGetCustomTypesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomTypesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AssetGetCustomTypesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomTypesListRequestBuilder {

        private GetCustomTypesListRequestBuilder() {
        }

        /**
         * Build call for getCustomTypesList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomTypesListCall(_callback);
        }


        /**
         * Execute getCustomTypesList request
         * @return AssetGetCustomTypesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetGetCustomTypesListResponse execute() throws ApiException {
            ApiResponse<AssetGetCustomTypesListResponse> localVarResp = getCustomTypesListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomTypesList request with HTTP info returned
         * @return ApiResponse&lt;AssetGetCustomTypesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetGetCustomTypesListResponse> executeWithHttpInfo() throws ApiException {
            return getCustomTypesListWithHttpInfo();
        }

        /**
         * Execute getCustomTypesList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetGetCustomTypesListResponse> _callback) throws ApiException {
            return getCustomTypesListAsync(_callback);
        }
    }

    /**
     * List custom asset types
     * 
     * @return GetCustomTypesListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomTypesListRequestBuilder getCustomTypesList() throws IllegalArgumentException {
        return new GetCustomTypesListRequestBuilder();
    }
    private okhttp3.Call getDetailCall(Integer assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/{asset_id}/detail"
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailValidateBeforeCall(Integer assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getDetail(Async)");
        }

        return getDetailCall(assetId, _callback);

    }


    private ApiResponse<AssetGetDetailResponse> getDetailWithHttpInfo(Integer assetId) throws ApiException {
        okhttp3.Call localVarCall = getDetailValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<AssetGetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailAsync(Integer assetId, final ApiCallback<AssetGetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<AssetGetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailRequestBuilder {
        private final Integer assetId;

        private GetDetailRequestBuilder(Integer assetId) {
            this.assetId = assetId;
        }

        /**
         * Build call for getDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailCall(assetId, _callback);
        }


        /**
         * Execute getDetail request
         * @return AssetGetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetGetDetailResponse execute() throws ApiException {
            ApiResponse<AssetGetDetailResponse> localVarResp = getDetailWithHttpInfo(assetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetail request with HTTP info returned
         * @return ApiResponse&lt;AssetGetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetGetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getDetailWithHttpInfo(assetId);
        }

        /**
         * Execute getDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetGetDetailResponse> _callback) throws ApiException {
            return getDetailAsync(assetId, _callback);
        }
    }

    /**
     * Asset detail
     * Get details about one asset
     * @param assetId  (required)
     * @return GetDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailRequestBuilder getDetail(Integer assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
        return new GetDetailRequestBuilder(assetId);
    }
    private okhttp3.Call listAssetsCall(Integer page, Integer personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person_id", personId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetsValidateBeforeCall(Integer page, Integer personId, final ApiCallback _callback) throws ApiException {
        return listAssetsCall(page, personId, _callback);

    }


    private ApiResponse<AssetListAssetsResponse> listAssetsWithHttpInfo(Integer page, Integer personId) throws ApiException {
        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(page, personId, null);
        Type localVarReturnType = new TypeToken<AssetListAssetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssetsAsync(Integer page, Integer personId, final ApiCallback<AssetListAssetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(page, personId, _callback);
        Type localVarReturnType = new TypeToken<AssetListAssetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssetsRequestBuilder {
        private Integer page;
        private Integer personId;

        private ListAssetsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Controls pagination (0, 1, 2, ..) to view all results. 30 items per page. (optional, default to 0)
         * @return ListAssetsRequestBuilder
         */
        public ListAssetsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set personId
         * @param personId view only assets that belong to a specific person (optional)
         * @return ListAssetsRequestBuilder
         */
        public ListAssetsRequestBuilder personId(Integer personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Build call for listAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssetsCall(page, personId, _callback);
        }


        /**
         * Execute listAssets request
         * @return AssetListAssetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetListAssetsResponse execute() throws ApiException {
            ApiResponse<AssetListAssetsResponse> localVarResp = listAssetsWithHttpInfo(page, personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssets request with HTTP info returned
         * @return ApiResponse&lt;AssetListAssetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetListAssetsResponse> executeWithHttpInfo() throws ApiException {
            return listAssetsWithHttpInfo(page, personId);
        }

        /**
         * Execute listAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetListAssetsResponse> _callback) throws ApiException {
            return listAssetsAsync(page, personId, _callback);
        }
    }

    /**
     * List assets
     * List all assets
     * @return ListAssetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListAssetsRequestBuilder listAssets() throws IllegalArgumentException {
        return new ListAssetsRequestBuilder();
    }
    private okhttp3.Call removeCall(Integer assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/{asset_id}"
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(Integer assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling remove(Async)");
        }

        return removeCall(assetId, _callback);

    }


    private ApiResponse<AssetRemoveResponse> removeWithHttpInfo(Integer assetId) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<AssetRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAsync(Integer assetId, final ApiCallback<AssetRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<AssetRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final Integer assetId;

        private RemoveRequestBuilder(Integer assetId) {
            this.assetId = assetId;
        }

        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCall(assetId, _callback);
        }


        /**
         * Execute remove request
         * @return AssetRemoveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetRemoveResponse execute() throws ApiException {
            ApiResponse<AssetRemoveResponse> localVarResp = removeWithHttpInfo(assetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;AssetRemoveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetRemoveResponse> executeWithHttpInfo() throws ApiException {
            return removeWithHttpInfo(assetId);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetRemoveResponse> _callback) throws ApiException {
            return removeAsync(assetId, _callback);
        }
    }

    /**
     * Delete asset
     * 
     * @param assetId The id of the asset that will be deleted (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(Integer assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
        return new RemoveRequestBuilder(assetId);
    }
    private okhttp3.Call removeCustomTypeCall(Integer assetTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/types/{asset_type_id}"
            .replace("{" + "asset_type_id" + "}", localVarApiClient.escapeString(assetTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCustomTypeValidateBeforeCall(Integer assetTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetTypeId' is set
        if (assetTypeId == null) {
            throw new ApiException("Missing the required parameter 'assetTypeId' when calling removeCustomType(Async)");
        }

        return removeCustomTypeCall(assetTypeId, _callback);

    }


    private ApiResponse<AssetRemoveCustomTypeResponse> removeCustomTypeWithHttpInfo(Integer assetTypeId) throws ApiException {
        okhttp3.Call localVarCall = removeCustomTypeValidateBeforeCall(assetTypeId, null);
        Type localVarReturnType = new TypeToken<AssetRemoveCustomTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeCustomTypeAsync(Integer assetTypeId, final ApiCallback<AssetRemoveCustomTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCustomTypeValidateBeforeCall(assetTypeId, _callback);
        Type localVarReturnType = new TypeToken<AssetRemoveCustomTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveCustomTypeRequestBuilder {
        private final Integer assetTypeId;

        private RemoveCustomTypeRequestBuilder(Integer assetTypeId) {
            this.assetTypeId = assetTypeId;
        }

        /**
         * Build call for removeCustomType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCustomTypeCall(assetTypeId, _callback);
        }


        /**
         * Execute removeCustomType request
         * @return AssetRemoveCustomTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetRemoveCustomTypeResponse execute() throws ApiException {
            ApiResponse<AssetRemoveCustomTypeResponse> localVarResp = removeCustomTypeWithHttpInfo(assetTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeCustomType request with HTTP info returned
         * @return ApiResponse&lt;AssetRemoveCustomTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetRemoveCustomTypeResponse> executeWithHttpInfo() throws ApiException {
            return removeCustomTypeWithHttpInfo(assetTypeId);
        }

        /**
         * Execute removeCustomType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetRemoveCustomTypeResponse> _callback) throws ApiException {
            return removeCustomTypeAsync(assetTypeId, _callback);
        }
    }

    /**
     * Delete custom asset type
     * 
     * @param assetTypeId  (required)
     * @return RemoveCustomTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCustomTypeRequestBuilder removeCustomType(Integer assetTypeId) throws IllegalArgumentException {
        if (assetTypeId == null) throw new IllegalArgumentException("\"assetTypeId\" is required but got null");
        return new RemoveCustomTypeRequestBuilder(assetTypeId);
    }
    private okhttp3.Call updateAssetCall(Integer assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/assets/{asset_id}"
            .replace("{" + "asset_id" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssetValidateBeforeCall(Integer assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling updateAsset(Async)");
        }

        return updateAssetCall(assetId, _callback);

    }


    private ApiResponse<AssetUpdateAssetResponse> updateAssetWithHttpInfo(Integer assetId) throws ApiException {
        okhttp3.Call localVarCall = updateAssetValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<AssetUpdateAssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssetAsync(Integer assetId, final ApiCallback<AssetUpdateAssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssetValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<AssetUpdateAssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAssetRequestBuilder {
        private final Integer assetId;

        private UpdateAssetRequestBuilder(Integer assetId) {
            this.assetId = assetId;
        }

        /**
         * Build call for updateAsset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAssetCall(assetId, _callback);
        }


        /**
         * Execute updateAsset request
         * @return AssetUpdateAssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AssetUpdateAssetResponse execute() throws ApiException {
            ApiResponse<AssetUpdateAssetResponse> localVarResp = updateAssetWithHttpInfo(assetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAsset request with HTTP info returned
         * @return ApiResponse&lt;AssetUpdateAssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetUpdateAssetResponse> executeWithHttpInfo() throws ApiException {
            return updateAssetWithHttpInfo(assetId);
        }

        /**
         * Execute updateAsset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetUpdateAssetResponse> _callback) throws ApiException {
            return updateAssetAsync(assetId, _callback);
        }
    }

    /**
     * Edit asset
     * 
     * @param assetId  (required)
     * @return UpdateAssetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAssetRequestBuilder updateAsset(Integer assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
        return new UpdateAssetRequestBuilder(assetId);
    }
}
