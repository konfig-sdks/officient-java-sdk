/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CostUnitGetFunctionsDetailResponse;
import com.konfigthis.client.model.CostUnitListFunctionsResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CostUnitApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CostUnitApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CostUnitApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFunctionsDetailCall(String internalCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/cost_units/detail/{internal_code}"
            .replace("{" + "internal_code" + "}", localVarApiClient.escapeString(internalCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionsDetailValidateBeforeCall(String internalCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'internalCode' is set
        if (internalCode == null) {
            throw new ApiException("Missing the required parameter 'internalCode' when calling getFunctionsDetail(Async)");
        }

        return getFunctionsDetailCall(internalCode, _callback);

    }


    private ApiResponse<CostUnitGetFunctionsDetailResponse> getFunctionsDetailWithHttpInfo(String internalCode) throws ApiException {
        okhttp3.Call localVarCall = getFunctionsDetailValidateBeforeCall(internalCode, null);
        Type localVarReturnType = new TypeToken<CostUnitGetFunctionsDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFunctionsDetailAsync(String internalCode, final ApiCallback<CostUnitGetFunctionsDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunctionsDetailValidateBeforeCall(internalCode, _callback);
        Type localVarReturnType = new TypeToken<CostUnitGetFunctionsDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFunctionsDetailRequestBuilder {
        private final String internalCode;

        private GetFunctionsDetailRequestBuilder(String internalCode) {
            this.internalCode = internalCode;
        }

        /**
         * Build call for getFunctionsDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFunctionsDetailCall(internalCode, _callback);
        }


        /**
         * Execute getFunctionsDetail request
         * @return CostUnitGetFunctionsDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CostUnitGetFunctionsDetailResponse execute() throws ApiException {
            ApiResponse<CostUnitGetFunctionsDetailResponse> localVarResp = getFunctionsDetailWithHttpInfo(internalCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFunctionsDetail request with HTTP info returned
         * @return ApiResponse&lt;CostUnitGetFunctionsDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostUnitGetFunctionsDetailResponse> executeWithHttpInfo() throws ApiException {
            return getFunctionsDetailWithHttpInfo(internalCode);
        }

        /**
         * Execute getFunctionsDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostUnitGetFunctionsDetailResponse> _callback) throws ApiException {
            return getFunctionsDetailAsync(internalCode, _callback);
        }
    }

    /**
     * Cost unit detail
     * Get the details of all functions or that of a single one
     * @param internalCode The internal code / GUID of the function you would like to receive information on (required)
     * @return GetFunctionsDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetFunctionsDetailRequestBuilder getFunctionsDetail(String internalCode) throws IllegalArgumentException {
        if (internalCode == null) throw new IllegalArgumentException("\"internalCode\" is required but got null");
            

        return new GetFunctionsDetailRequestBuilder(internalCode);
    }
    private okhttp3.Call listFunctionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/wages/cost_units/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listFunctionsCall(_callback);

    }


    private ApiResponse<List<CostUnitListFunctionsResponseInner>> listFunctionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listFunctionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CostUnitListFunctionsResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFunctionsAsync(final ApiCallback<List<CostUnitListFunctionsResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFunctionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CostUnitListFunctionsResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFunctionsRequestBuilder {

        private ListFunctionsRequestBuilder() {
        }

        /**
         * Build call for listFunctions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFunctionsCall(_callback);
        }


        /**
         * Execute listFunctions request
         * @return List&lt;CostUnitListFunctionsResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public List<CostUnitListFunctionsResponseInner> execute() throws ApiException {
            ApiResponse<List<CostUnitListFunctionsResponseInner>> localVarResp = listFunctionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFunctions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CostUnitListFunctionsResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CostUnitListFunctionsResponseInner>> executeWithHttpInfo() throws ApiException {
            return listFunctionsWithHttpInfo();
        }

        /**
         * Execute listFunctions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CostUnitListFunctionsResponseInner>> _callback) throws ApiException {
            return listFunctionsAsync(_callback);
        }
    }

    /**
     * List cost units
     * Get the details of all functions or that of a single one
     * @return ListFunctionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListFunctionsRequestBuilder listFunctions() throws IllegalArgumentException {
        return new ListFunctionsRequestBuilder();
    }
}
