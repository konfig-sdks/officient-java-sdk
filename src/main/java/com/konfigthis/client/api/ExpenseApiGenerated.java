/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExpenseAddCategoryRequest;
import com.konfigthis.client.model.ExpenseAddCategoryResponse;
import com.konfigthis.client.model.ExpenseAddExpenseWithCategoryRequest;
import com.konfigthis.client.model.ExpenseAddExpenseWithCategoryResponse;
import com.konfigthis.client.model.ExpenseDeleteByIdResponse;
import com.konfigthis.client.model.ExpenseDeleteCategoryResponse;
import com.konfigthis.client.model.ExpenseEditCategoryNameRequest;
import com.konfigthis.client.model.ExpenseEditCategoryNameResponse;
import com.konfigthis.client.model.ExpenseGetDetailResponse;
import com.konfigthis.client.model.ExpenseListByCategoryDetailResponse;
import com.konfigthis.client.model.ExpenseListByMonthResponse;
import com.konfigthis.client.model.ExpenseListByYearResponse;
import com.konfigthis.client.model.ExpenseSetPayoutMethodAndStatusRequest;
import com.konfigthis.client.model.ExpenseSetPayoutMethodAndStatusResponse;
import com.konfigthis.client.model.ExpenseUpdateDetailsRequest;
import com.konfigthis.client.model.ExpenseUpdateDetailsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpenseApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpenseApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExpenseApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCategoryCall(ExpenseAddCategoryRequest expenseAddCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseAddCategoryRequest;

        // create path and map variables
        String localVarPath = "/1.0/expenses/categories/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryValidateBeforeCall(ExpenseAddCategoryRequest expenseAddCategoryRequest, final ApiCallback _callback) throws ApiException {
        return addCategoryCall(expenseAddCategoryRequest, _callback);

    }


    private ApiResponse<ExpenseAddCategoryResponse> addCategoryWithHttpInfo(ExpenseAddCategoryRequest expenseAddCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(expenseAddCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ExpenseAddCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCategoryAsync(ExpenseAddCategoryRequest expenseAddCategoryRequest, final ApiCallback<ExpenseAddCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(expenseAddCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpenseAddCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCategoryRequestBuilder {
        private final String name;
        private final String type;
        private Float pricePerKilometer;
        private Float pricePerDay;

        private AddCategoryRequestBuilder(String name, String type) {
            this.name = name;
            this.type = type;
        }

        /**
         * Set pricePerKilometer
         * @param pricePerKilometer  (optional)
         * @return AddCategoryRequestBuilder
         */
        public AddCategoryRequestBuilder pricePerKilometer(Float pricePerKilometer) {
            this.pricePerKilometer = pricePerKilometer;
            return this;
        }
        
        /**
         * Set pricePerDay
         * @param pricePerDay  (optional)
         * @return AddCategoryRequestBuilder
         */
        public AddCategoryRequestBuilder pricePerDay(Float pricePerDay) {
            this.pricePerDay = pricePerDay;
            return this;
        }
        
        /**
         * Build call for addCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseAddCategoryRequest expenseAddCategoryRequest = buildBodyParams();
            return addCategoryCall(expenseAddCategoryRequest, _callback);
        }

        private ExpenseAddCategoryRequest buildBodyParams() {
            ExpenseAddCategoryRequest expenseAddCategoryRequest = new ExpenseAddCategoryRequest();
            expenseAddCategoryRequest.name(this.name);
            if (this.type != null)
            expenseAddCategoryRequest.type(ExpenseAddCategoryRequest.TypeEnum.fromValue(this.type));
            expenseAddCategoryRequest.pricePerKilometer(this.pricePerKilometer);
            expenseAddCategoryRequest.pricePerDay(this.pricePerDay);
            return expenseAddCategoryRequest;
        }

        /**
         * Execute addCategory request
         * @return ExpenseAddCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseAddCategoryResponse execute() throws ApiException {
            ExpenseAddCategoryRequest expenseAddCategoryRequest = buildBodyParams();
            ApiResponse<ExpenseAddCategoryResponse> localVarResp = addCategoryWithHttpInfo(expenseAddCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCategory request with HTTP info returned
         * @return ApiResponse&lt;ExpenseAddCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseAddCategoryResponse> executeWithHttpInfo() throws ApiException {
            ExpenseAddCategoryRequest expenseAddCategoryRequest = buildBodyParams();
            return addCategoryWithHttpInfo(expenseAddCategoryRequest);
        }

        /**
         * Execute addCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseAddCategoryResponse> _callback) throws ApiException {
            ExpenseAddCategoryRequest expenseAddCategoryRequest = buildBodyParams();
            return addCategoryAsync(expenseAddCategoryRequest, _callback);
        }
    }

    /**
     * Add expense category
     * The api end-point to add an expense nd an optional category id
     * @return AddCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddCategoryRequestBuilder addCategory(String name, String type) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new AddCategoryRequestBuilder(name, type);
    }
    private okhttp3.Call addExpenseWithCategoryCall(ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseAddExpenseWithCategoryRequest;

        // create path and map variables
        String localVarPath = "/1.0/expenses/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExpenseWithCategoryValidateBeforeCall(ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest, final ApiCallback _callback) throws ApiException {
        return addExpenseWithCategoryCall(expenseAddExpenseWithCategoryRequest, _callback);

    }


    private ApiResponse<ExpenseAddExpenseWithCategoryResponse> addExpenseWithCategoryWithHttpInfo(ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addExpenseWithCategoryValidateBeforeCall(expenseAddExpenseWithCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ExpenseAddExpenseWithCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addExpenseWithCategoryAsync(ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest, final ApiCallback<ExpenseAddExpenseWithCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExpenseWithCategoryValidateBeforeCall(expenseAddExpenseWithCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpenseAddExpenseWithCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddExpenseWithCategoryRequestBuilder {
        private final String description;
        private final Integer employeeId;
        private final Integer categoryId;
        private Float amount;
        private String extraInformation;
        private String date;
        private String filename;
        private String fileBase64;
        private List<String> dates;
        private Integer distance;
        private String ride;

        private AddExpenseWithCategoryRequestBuilder(String description, Integer employeeId, Integer categoryId) {
            this.description = description;
            this.employeeId = employeeId;
            this.categoryId = categoryId;
        }

        /**
         * Set amount
         * @param amount this is the price of the expense, this is only required when using a total amount category (optional)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set extraInformation
         * @param extraInformation  (optional)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder extraInformation(String extraInformation) {
            this.extraInformation = extraInformation;
            return this;
        }
        
        /**
         * Set date
         * @param date this is the day the expense has incurred on and is required when it is a total amount category (optional)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set filename
         * @param filename this is required when you want to add an expense with a total amount category (optional)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Set fileBase64
         * @param fileBase64 this is required when you want to add an expense with a total amount category (optional)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder fileBase64(String fileBase64) {
            this.fileBase64 = fileBase64;
            return this;
        }
        
        /**
         * Set dates
         * @param dates this is required when you want to add an expense with a kilometer or day allowance expense category, multiple dates are also possible (ex: [\\\&quot;24/05/2023\\\&quot;, \\\&quot;26/05/2023\\\&quot;]) (optional)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder dates(List<String> dates) {
            this.dates = dates;
            return this;
        }
        
        /**
         * Set distance
         * @param distance this is required when you want to update to a killometer allowance expense category. This is equal to the total amount of kilometers that has been done (optional, default to 0)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder distance(Integer distance) {
            this.distance = distance;
            return this;
        }
        
        /**
         * Set ride
         * @param ride this is the value if it&#39;s an outward or a round journey when using kilometer allowances, this defaults to single (optional, default to single)
         * @return AddExpenseWithCategoryRequestBuilder
         */
        public AddExpenseWithCategoryRequestBuilder ride(String ride) {
            this.ride = ride;
            return this;
        }
        
        /**
         * Build call for addExpenseWithCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest = buildBodyParams();
            return addExpenseWithCategoryCall(expenseAddExpenseWithCategoryRequest, _callback);
        }

        private ExpenseAddExpenseWithCategoryRequest buildBodyParams() {
            ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest = new ExpenseAddExpenseWithCategoryRequest();
            expenseAddExpenseWithCategoryRequest.description(this.description);
            expenseAddExpenseWithCategoryRequest.employeeId(this.employeeId);
            expenseAddExpenseWithCategoryRequest.categoryId(this.categoryId);
            expenseAddExpenseWithCategoryRequest.amount(this.amount);
            expenseAddExpenseWithCategoryRequest.extraInformation(this.extraInformation);
            expenseAddExpenseWithCategoryRequest.date(this.date);
            expenseAddExpenseWithCategoryRequest.filename(this.filename);
            expenseAddExpenseWithCategoryRequest.fileBase64(this.fileBase64);
            expenseAddExpenseWithCategoryRequest.dates(this.dates);
            expenseAddExpenseWithCategoryRequest.distance(this.distance);
            if (this.ride != null)
            expenseAddExpenseWithCategoryRequest.ride(ExpenseAddExpenseWithCategoryRequest.RideEnum.fromValue(this.ride));
            return expenseAddExpenseWithCategoryRequest;
        }

        /**
         * Execute addExpenseWithCategory request
         * @return ExpenseAddExpenseWithCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseAddExpenseWithCategoryResponse execute() throws ApiException {
            ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest = buildBodyParams();
            ApiResponse<ExpenseAddExpenseWithCategoryResponse> localVarResp = addExpenseWithCategoryWithHttpInfo(expenseAddExpenseWithCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addExpenseWithCategory request with HTTP info returned
         * @return ApiResponse&lt;ExpenseAddExpenseWithCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseAddExpenseWithCategoryResponse> executeWithHttpInfo() throws ApiException {
            ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest = buildBodyParams();
            return addExpenseWithCategoryWithHttpInfo(expenseAddExpenseWithCategoryRequest);
        }

        /**
         * Execute addExpenseWithCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseAddExpenseWithCategoryResponse> _callback) throws ApiException {
            ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest = buildBodyParams();
            return addExpenseWithCategoryAsync(expenseAddExpenseWithCategoryRequest, _callback);
        }
    }

    /**
     * Add expense
     * The api end-point to add an expense nd an optional category id
     * @return AddExpenseWithCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public AddExpenseWithCategoryRequestBuilder addExpenseWithCategory(String description, Integer employeeId, Integer categoryId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
        return new AddExpenseWithCategoryRequestBuilder(description, employeeId, categoryId);
    }
    private okhttp3.Call deleteByIdCall(Integer expenseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/{expense_id}"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(Integer expenseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling deleteById(Async)");
        }

        return deleteByIdCall(expenseId, _callback);

    }


    private ApiResponse<ExpenseDeleteByIdResponse> deleteByIdWithHttpInfo(Integer expenseId) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(expenseId, null);
        Type localVarReturnType = new TypeToken<ExpenseDeleteByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(Integer expenseId, final ApiCallback<ExpenseDeleteByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(expenseId, _callback);
        Type localVarReturnType = new TypeToken<ExpenseDeleteByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final Integer expenseId;

        private DeleteByIdRequestBuilder(Integer expenseId) {
            this.expenseId = expenseId;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(expenseId, _callback);
        }


        /**
         * Execute deleteById request
         * @return ExpenseDeleteByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseDeleteByIdResponse execute() throws ApiException {
            ApiResponse<ExpenseDeleteByIdResponse> localVarResp = deleteByIdWithHttpInfo(expenseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;ExpenseDeleteByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseDeleteByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(expenseId);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseDeleteByIdResponse> _callback) throws ApiException {
            return deleteByIdAsync(expenseId, _callback);
        }
    }

    /**
     * Delete expense
     * 
     * @param expenseId  (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(Integer expenseId) throws IllegalArgumentException {
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
        return new DeleteByIdRequestBuilder(expenseId);
    }
    private okhttp3.Call deleteCategoryCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/categories/{category_id}"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(categoryId, _callback);

    }


    private ApiResponse<ExpenseDeleteCategoryResponse> deleteCategoryWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<ExpenseDeleteCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCategoryAsync(Integer categoryId, final ApiCallback<ExpenseDeleteCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<ExpenseDeleteCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCategoryRequestBuilder {
        private final Integer categoryId;

        private DeleteCategoryRequestBuilder(Integer categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Build call for deleteCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCategoryCall(categoryId, _callback);
        }


        /**
         * Execute deleteCategory request
         * @return ExpenseDeleteCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseDeleteCategoryResponse execute() throws ApiException {
            ApiResponse<ExpenseDeleteCategoryResponse> localVarResp = deleteCategoryWithHttpInfo(categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCategory request with HTTP info returned
         * @return ApiResponse&lt;ExpenseDeleteCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseDeleteCategoryResponse> executeWithHttpInfo() throws ApiException {
            return deleteCategoryWithHttpInfo(categoryId);
        }

        /**
         * Execute deleteCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseDeleteCategoryResponse> _callback) throws ApiException {
            return deleteCategoryAsync(categoryId, _callback);
        }
    }

    /**
     * Delete expense category
     * 
     * @param categoryId  (required)
     * @return DeleteCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCategoryRequestBuilder deleteCategory(Integer categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
        return new DeleteCategoryRequestBuilder(categoryId);
    }
    private okhttp3.Call editCategoryNameCall(Integer categoryId, ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseEditCategoryNameRequest;

        // create path and map variables
        String localVarPath = "/1.0/expenses/categories/{category_id}"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editCategoryNameValidateBeforeCall(Integer categoryId, ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling editCategoryName(Async)");
        }

        return editCategoryNameCall(categoryId, expenseEditCategoryNameRequest, _callback);

    }


    private ApiResponse<ExpenseEditCategoryNameResponse> editCategoryNameWithHttpInfo(Integer categoryId, ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest) throws ApiException {
        okhttp3.Call localVarCall = editCategoryNameValidateBeforeCall(categoryId, expenseEditCategoryNameRequest, null);
        Type localVarReturnType = new TypeToken<ExpenseEditCategoryNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editCategoryNameAsync(Integer categoryId, ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest, final ApiCallback<ExpenseEditCategoryNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editCategoryNameValidateBeforeCall(categoryId, expenseEditCategoryNameRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpenseEditCategoryNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditCategoryNameRequestBuilder {
        private final String name;
        private final Integer categoryId;

        private EditCategoryNameRequestBuilder(String name, Integer categoryId) {
            this.name = name;
            this.categoryId = categoryId;
        }

        /**
         * Build call for editCategoryName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest = buildBodyParams();
            return editCategoryNameCall(categoryId, expenseEditCategoryNameRequest, _callback);
        }

        private ExpenseEditCategoryNameRequest buildBodyParams() {
            ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest = new ExpenseEditCategoryNameRequest();
            expenseEditCategoryNameRequest.name(this.name);
            return expenseEditCategoryNameRequest;
        }

        /**
         * Execute editCategoryName request
         * @return ExpenseEditCategoryNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseEditCategoryNameResponse execute() throws ApiException {
            ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest = buildBodyParams();
            ApiResponse<ExpenseEditCategoryNameResponse> localVarResp = editCategoryNameWithHttpInfo(categoryId, expenseEditCategoryNameRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editCategoryName request with HTTP info returned
         * @return ApiResponse&lt;ExpenseEditCategoryNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseEditCategoryNameResponse> executeWithHttpInfo() throws ApiException {
            ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest = buildBodyParams();
            return editCategoryNameWithHttpInfo(categoryId, expenseEditCategoryNameRequest);
        }

        /**
         * Execute editCategoryName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseEditCategoryNameResponse> _callback) throws ApiException {
            ExpenseEditCategoryNameRequest expenseEditCategoryNameRequest = buildBodyParams();
            return editCategoryNameAsync(categoryId, expenseEditCategoryNameRequest, _callback);
        }
    }

    /**
     * Edit expense category name
     * 
     * @param categoryId  (required)
     * @return EditCategoryNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public EditCategoryNameRequestBuilder editCategoryName(String name, Integer categoryId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
        return new EditCategoryNameRequestBuilder(name, categoryId);
    }
    private okhttp3.Call getDetailCall(Integer expenseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/{expense_id}/detail"
            .replace("{" + "expense id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailValidateBeforeCall(Integer expenseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling getDetail(Async)");
        }

        return getDetailCall(expenseId, _callback);

    }


    private ApiResponse<ExpenseGetDetailResponse> getDetailWithHttpInfo(Integer expenseId) throws ApiException {
        okhttp3.Call localVarCall = getDetailValidateBeforeCall(expenseId, null);
        Type localVarReturnType = new TypeToken<ExpenseGetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailAsync(Integer expenseId, final ApiCallback<ExpenseGetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailValidateBeforeCall(expenseId, _callback);
        Type localVarReturnType = new TypeToken<ExpenseGetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailRequestBuilder {
        private final Integer expenseId;

        private GetDetailRequestBuilder(Integer expenseId) {
            this.expenseId = expenseId;
        }

        /**
         * Build call for getDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailCall(expenseId, _callback);
        }


        /**
         * Execute getDetail request
         * @return ExpenseGetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseGetDetailResponse execute() throws ApiException {
            ApiResponse<ExpenseGetDetailResponse> localVarResp = getDetailWithHttpInfo(expenseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetail request with HTTP info returned
         * @return ApiResponse&lt;ExpenseGetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseGetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getDetailWithHttpInfo(expenseId);
        }

        /**
         * Execute getDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseGetDetailResponse> _callback) throws ApiException {
            return getDetailAsync(expenseId, _callback);
        }
    }

    /**
     * Expense detail
     * List all expenses
     * @param expenseId the specific id we want to see the details about (required)
     * @return GetDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailRequestBuilder getDetail(Integer expenseId) throws IllegalArgumentException {
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
        return new GetDetailRequestBuilder(expenseId);
    }
    private okhttp3.Call listByCategoryDetailCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/categories/{category_id}/detail"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByCategoryDetailValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling listByCategoryDetail(Async)");
        }

        return listByCategoryDetailCall(categoryId, _callback);

    }


    private ApiResponse<ExpenseListByCategoryDetailResponse> listByCategoryDetailWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = listByCategoryDetailValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<ExpenseListByCategoryDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByCategoryDetailAsync(Integer categoryId, final ApiCallback<ExpenseListByCategoryDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByCategoryDetailValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<ExpenseListByCategoryDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByCategoryDetailRequestBuilder {
        private final Integer categoryId;

        private ListByCategoryDetailRequestBuilder(Integer categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Build call for listByCategoryDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByCategoryDetailCall(categoryId, _callback);
        }


        /**
         * Execute listByCategoryDetail request
         * @return ExpenseListByCategoryDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseListByCategoryDetailResponse execute() throws ApiException {
            ApiResponse<ExpenseListByCategoryDetailResponse> localVarResp = listByCategoryDetailWithHttpInfo(categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByCategoryDetail request with HTTP info returned
         * @return ApiResponse&lt;ExpenseListByCategoryDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseListByCategoryDetailResponse> executeWithHttpInfo() throws ApiException {
            return listByCategoryDetailWithHttpInfo(categoryId);
        }

        /**
         * Execute listByCategoryDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseListByCategoryDetailResponse> _callback) throws ApiException {
            return listByCategoryDetailAsync(categoryId, _callback);
        }
    }

    /**
     * Expense category detail
     * List all expenses
     * @param categoryId the specific id we want to see the details about (required)
     * @return ListByCategoryDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListByCategoryDetailRequestBuilder listByCategoryDetail(Integer categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
        return new ListByCategoryDetailRequestBuilder(categoryId);
    }
    private okhttp3.Call listByMonthCall(String year, String month, String page, Integer includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/list/{year}/{month}"
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_deleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByMonthValidateBeforeCall(String year, String month, String page, Integer includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling listByMonth(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling listByMonth(Async)");
        }

        return listByMonthCall(year, month, page, includeDeleted, _callback);

    }


    private ApiResponse<ExpenseListByMonthResponse> listByMonthWithHttpInfo(String year, String month, String page, Integer includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = listByMonthValidateBeforeCall(year, month, page, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ExpenseListByMonthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByMonthAsync(String year, String month, String page, Integer includeDeleted, final ApiCallback<ExpenseListByMonthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByMonthValidateBeforeCall(year, month, page, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ExpenseListByMonthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByMonthRequestBuilder {
        private final String year;
        private final String month;
        private String page;
        private Integer includeDeleted;

        private ListByMonthRequestBuilder(String year, String month) {
            this.year = year;
            this.month = month;
        }

        /**
         * Set page
         * @param page optional to filter pages (optional, default to 0)
         * @return ListByMonthRequestBuilder
         */
        public ListByMonthRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted this is so you can exclude any deleted expense, by default we show them (0 - 1) (optional, default to 1)
         * @return ListByMonthRequestBuilder
         */
        public ListByMonthRequestBuilder includeDeleted(Integer includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for listByMonth
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByMonthCall(year, month, page, includeDeleted, _callback);
        }


        /**
         * Execute listByMonth request
         * @return ExpenseListByMonthResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseListByMonthResponse execute() throws ApiException {
            ApiResponse<ExpenseListByMonthResponse> localVarResp = listByMonthWithHttpInfo(year, month, page, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByMonth request with HTTP info returned
         * @return ApiResponse&lt;ExpenseListByMonthResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseListByMonthResponse> executeWithHttpInfo() throws ApiException {
            return listByMonthWithHttpInfo(year, month, page, includeDeleted);
        }

        /**
         * Execute listByMonth request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseListByMonthResponse> _callback) throws ApiException {
            return listByMonthAsync(year, month, page, includeDeleted, _callback);
        }
    }

    /**
     * List expenses by month
     * List all expenses
     * @param year the specific year we want to filter (required)
     * @param month the specific month we want to filter this is optional (required)
     * @return ListByMonthRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListByMonthRequestBuilder listByMonth(String year, String month) throws IllegalArgumentException {
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        return new ListByMonthRequestBuilder(year, month);
    }
    private okhttp3.Call listByYearCall(String year, String month, String page, Integer includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/list/{year}"
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_deleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByYearValidateBeforeCall(String year, String month, String page, Integer includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling listByYear(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling listByYear(Async)");
        }

        return listByYearCall(year, month, page, includeDeleted, _callback);

    }


    private ApiResponse<ExpenseListByYearResponse> listByYearWithHttpInfo(String year, String month, String page, Integer includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = listByYearValidateBeforeCall(year, month, page, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ExpenseListByYearResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByYearAsync(String year, String month, String page, Integer includeDeleted, final ApiCallback<ExpenseListByYearResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByYearValidateBeforeCall(year, month, page, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ExpenseListByYearResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByYearRequestBuilder {
        private final String year;
        private final String month;
        private String page;
        private Integer includeDeleted;

        private ListByYearRequestBuilder(String year, String month) {
            this.year = year;
            this.month = month;
        }

        /**
         * Set page
         * @param page optional to filter pages (optional, default to 0)
         * @return ListByYearRequestBuilder
         */
        public ListByYearRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted this is so you can exclude any deleted expense, by default we show them (0 - 1) (optional, default to 1)
         * @return ListByYearRequestBuilder
         */
        public ListByYearRequestBuilder includeDeleted(Integer includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for listByYear
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByYearCall(year, month, page, includeDeleted, _callback);
        }


        /**
         * Execute listByYear request
         * @return ExpenseListByYearResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseListByYearResponse execute() throws ApiException {
            ApiResponse<ExpenseListByYearResponse> localVarResp = listByYearWithHttpInfo(year, month, page, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByYear request with HTTP info returned
         * @return ApiResponse&lt;ExpenseListByYearResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseListByYearResponse> executeWithHttpInfo() throws ApiException {
            return listByYearWithHttpInfo(year, month, page, includeDeleted);
        }

        /**
         * Execute listByYear request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseListByYearResponse> _callback) throws ApiException {
            return listByYearAsync(year, month, page, includeDeleted, _callback);
        }
    }

    /**
     * List expenses by year
     * List all expenses
     * @param year the specific year we want to filter (required)
     * @param month the specific month we want to filter this is optional (required)
     * @return ListByYearRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListByYearRequestBuilder listByYear(String year, String month) throws IllegalArgumentException {
        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
            

        return new ListByYearRequestBuilder(year, month);
    }
    private okhttp3.Call listCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/expenses/categories/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCategoriesCall(_callback);

    }


    private ApiResponse<String> listCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesRequestBuilder {

        private ListCategoriesRequestBuilder() {
        }

        /**
         * Build call for listCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesCall(_callback);
        }


        /**
         * Execute listCategories request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = listCategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategories request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return listCategoriesWithHttpInfo();
        }

        /**
         * Execute listCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return listCategoriesAsync(_callback);
        }
    }

    /**
     * List expense categories
     * List all expenses
     * @return ListCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoriesRequestBuilder listCategories() throws IllegalArgumentException {
        return new ListCategoriesRequestBuilder();
    }
    private okhttp3.Call setPayoutMethodAndStatusCall(Integer expenseId, ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseSetPayoutMethodAndStatusRequest;

        // create path and map variables
        String localVarPath = "/1.0/expenses/{expense_id}/updatePayout"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPayoutMethodAndStatusValidateBeforeCall(Integer expenseId, ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling setPayoutMethodAndStatus(Async)");
        }

        return setPayoutMethodAndStatusCall(expenseId, expenseSetPayoutMethodAndStatusRequest, _callback);

    }


    private ApiResponse<ExpenseSetPayoutMethodAndStatusResponse> setPayoutMethodAndStatusWithHttpInfo(Integer expenseId, ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = setPayoutMethodAndStatusValidateBeforeCall(expenseId, expenseSetPayoutMethodAndStatusRequest, null);
        Type localVarReturnType = new TypeToken<ExpenseSetPayoutMethodAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setPayoutMethodAndStatusAsync(Integer expenseId, ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest, final ApiCallback<ExpenseSetPayoutMethodAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPayoutMethodAndStatusValidateBeforeCall(expenseId, expenseSetPayoutMethodAndStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpenseSetPayoutMethodAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetPayoutMethodAndStatusRequestBuilder {
        private final String newPayoutMethod;
        private final Integer expenseId;
        private String payoutOtherReason;
        private String payoutStatus;
        private String period;
        private String year;

        private SetPayoutMethodAndStatusRequestBuilder(String newPayoutMethod, Integer expenseId) {
            this.newPayoutMethod = newPayoutMethod;
            this.expenseId = expenseId;
        }

        /**
         * Set payoutOtherReason
         * @param payoutOtherReason  (optional)
         * @return SetPayoutMethodAndStatusRequestBuilder
         */
        public SetPayoutMethodAndStatusRequestBuilder payoutOtherReason(String payoutOtherReason) {
            this.payoutOtherReason = payoutOtherReason;
            return this;
        }
        
        /**
         * Set payoutStatus
         * @param payoutStatus This field is required when the \\\&quot;new\\\&quot;payout_method\\\&quot; is either PAYOUT_ACCOUNTING, PAYOUT_OTHER or PAYOUT_MANUALLY (optional)
         * @return SetPayoutMethodAndStatusRequestBuilder
         */
        public SetPayoutMethodAndStatusRequestBuilder payoutStatus(String payoutStatus) {
            this.payoutStatus = payoutStatus;
            return this;
        }
        
        /**
         * Set period
         * @param period  (optional)
         * @return SetPayoutMethodAndStatusRequestBuilder
         */
        public SetPayoutMethodAndStatusRequestBuilder period(String period) {
            this.period = period;
            return this;
        }
        
        /**
         * Set year
         * @param year  (optional)
         * @return SetPayoutMethodAndStatusRequestBuilder
         */
        public SetPayoutMethodAndStatusRequestBuilder year(String year) {
            this.year = year;
            return this;
        }
        
        /**
         * Build call for setPayoutMethodAndStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest = buildBodyParams();
            return setPayoutMethodAndStatusCall(expenseId, expenseSetPayoutMethodAndStatusRequest, _callback);
        }

        private ExpenseSetPayoutMethodAndStatusRequest buildBodyParams() {
            ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest = new ExpenseSetPayoutMethodAndStatusRequest();
            if (this.newPayoutMethod != null)
            expenseSetPayoutMethodAndStatusRequest.newPayoutMethod(ExpenseSetPayoutMethodAndStatusRequest.NewPayoutMethodEnum.fromValue(this.newPayoutMethod));
            expenseSetPayoutMethodAndStatusRequest.payoutOtherReason(this.payoutOtherReason);
            if (this.payoutStatus != null)
            expenseSetPayoutMethodAndStatusRequest.payoutStatus(ExpenseSetPayoutMethodAndStatusRequest.PayoutStatusEnum.fromValue(this.payoutStatus));
            expenseSetPayoutMethodAndStatusRequest.period(this.period);
            expenseSetPayoutMethodAndStatusRequest.year(this.year);
            return expenseSetPayoutMethodAndStatusRequest;
        }

        /**
         * Execute setPayoutMethodAndStatus request
         * @return ExpenseSetPayoutMethodAndStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseSetPayoutMethodAndStatusResponse execute() throws ApiException {
            ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest = buildBodyParams();
            ApiResponse<ExpenseSetPayoutMethodAndStatusResponse> localVarResp = setPayoutMethodAndStatusWithHttpInfo(expenseId, expenseSetPayoutMethodAndStatusRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setPayoutMethodAndStatus request with HTTP info returned
         * @return ApiResponse&lt;ExpenseSetPayoutMethodAndStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseSetPayoutMethodAndStatusResponse> executeWithHttpInfo() throws ApiException {
            ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest = buildBodyParams();
            return setPayoutMethodAndStatusWithHttpInfo(expenseId, expenseSetPayoutMethodAndStatusRequest);
        }

        /**
         * Execute setPayoutMethodAndStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseSetPayoutMethodAndStatusResponse> _callback) throws ApiException {
            ExpenseSetPayoutMethodAndStatusRequest expenseSetPayoutMethodAndStatusRequest = buildBodyParams();
            return setPayoutMethodAndStatusAsync(expenseId, expenseSetPayoutMethodAndStatusRequest, _callback);
        }
    }

    /**
     * Set payout method and status
     * 
     * @param expenseId  (required)
     * @return SetPayoutMethodAndStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SetPayoutMethodAndStatusRequestBuilder setPayoutMethodAndStatus(String newPayoutMethod, Integer expenseId) throws IllegalArgumentException {
        if (newPayoutMethod == null) throw new IllegalArgumentException("\"newPayoutMethod\" is required but got null");
            

        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
        return new SetPayoutMethodAndStatusRequestBuilder(newPayoutMethod, expenseId);
    }
    private okhttp3.Call updateDetailsCall(Integer expenseId, ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expenseUpdateDetailsRequest;

        // create path and map variables
        String localVarPath = "/1.0/expenses/{expense_id}"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(Integer expenseId, ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(expenseId, expenseUpdateDetailsRequest, _callback);

    }


    private ApiResponse<ExpenseUpdateDetailsResponse> updateDetailsWithHttpInfo(Integer expenseId, ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(expenseId, expenseUpdateDetailsRequest, null);
        Type localVarReturnType = new TypeToken<ExpenseUpdateDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(Integer expenseId, ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest, final ApiCallback<ExpenseUpdateDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(expenseId, expenseUpdateDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpenseUpdateDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final Integer categoryId;
        private final Integer expenseId;

        private UpdateDetailsRequestBuilder(Integer categoryId, Integer expenseId) {
            this.categoryId = categoryId;
            this.expenseId = expenseId;
        }

        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest = buildBodyParams();
            return updateDetailsCall(expenseId, expenseUpdateDetailsRequest, _callback);
        }

        private ExpenseUpdateDetailsRequest buildBodyParams() {
            ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest = new ExpenseUpdateDetailsRequest();
            expenseUpdateDetailsRequest.categoryId(this.categoryId);
            return expenseUpdateDetailsRequest;
        }

        /**
         * Execute updateDetails request
         * @return ExpenseUpdateDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseUpdateDetailsResponse execute() throws ApiException {
            ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest = buildBodyParams();
            ApiResponse<ExpenseUpdateDetailsResponse> localVarResp = updateDetailsWithHttpInfo(expenseId, expenseUpdateDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;ExpenseUpdateDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseUpdateDetailsResponse> executeWithHttpInfo() throws ApiException {
            ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest = buildBodyParams();
            return updateDetailsWithHttpInfo(expenseId, expenseUpdateDetailsRequest);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseUpdateDetailsResponse> _callback) throws ApiException {
            ExpenseUpdateDetailsRequest expenseUpdateDetailsRequest = buildBodyParams();
            return updateDetailsAsync(expenseId, expenseUpdateDetailsRequest, _callback);
        }
    }

    /**
     * Edit expense
     * 
     * @param expenseId  (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(Integer categoryId, Integer expenseId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
        return new UpdateDetailsRequestBuilder(categoryId, expenseId);
    }
}
