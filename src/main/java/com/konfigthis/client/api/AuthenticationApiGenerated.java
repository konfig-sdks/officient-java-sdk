/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuthenticationGetAccessTokenRequest;
import com.konfigthis.client.model.AuthenticationGetAccessTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAccessTokenCall(AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationGetAccessTokenRequest;

        // create path and map variables
        String localVarPath = "/1.0/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessTokenValidateBeforeCall(AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest, final ApiCallback _callback) throws ApiException {
        return getAccessTokenCall(authenticationGetAccessTokenRequest, _callback);

    }


    private ApiResponse<AuthenticationGetAccessTokenResponse> getAccessTokenWithHttpInfo(AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(authenticationGetAccessTokenRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticationGetAccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccessTokenAsync(AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest, final ApiCallback<AuthenticationGetAccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(authenticationGetAccessTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationGetAccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccessTokenRequestBuilder {
        private String code;
        private String clientId;
        private String clientSecret;
        private String grantType;
        private String refreshToken;

        private GetAccessTokenRequestBuilder() {
        }

        /**
         * Set code
         * @param code Authorization code in case of 3 legged oauth flow (optional)
         * @return GetAccessTokenRequestBuilder
         */
        public GetAccessTokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId client_id of your app. Can be found under &#39;my apps&#39; (optional)
         * @return GetAccessTokenRequestBuilder
         */
        public GetAccessTokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret client secret of your app. Can be found under &#39;my apps&#39; (optional)
         * @return GetAccessTokenRequestBuilder
         */
        public GetAccessTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType should always be either authorization_code or refresh_token (optional)
         * @return GetAccessTokenRequestBuilder
         */
        public GetAccessTokenRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set refreshToken
         * @param refreshToken optional (optional)
         * @return GetAccessTokenRequestBuilder
         */
        public GetAccessTokenRequestBuilder refreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        
        /**
         * Build call for getAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest = buildBodyParams();
            return getAccessTokenCall(authenticationGetAccessTokenRequest, _callback);
        }

        private AuthenticationGetAccessTokenRequest buildBodyParams() {
            AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest = new AuthenticationGetAccessTokenRequest();
            authenticationGetAccessTokenRequest.code(this.code);
            authenticationGetAccessTokenRequest.clientId(this.clientId);
            authenticationGetAccessTokenRequest.clientSecret(this.clientSecret);
            authenticationGetAccessTokenRequest.grantType(this.grantType);
            authenticationGetAccessTokenRequest.refreshToken(this.refreshToken);
            return authenticationGetAccessTokenRequest;
        }

        /**
         * Execute getAccessToken request
         * @return AuthenticationGetAccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AuthenticationGetAccessTokenResponse execute() throws ApiException {
            AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest = buildBodyParams();
            ApiResponse<AuthenticationGetAccessTokenResponse> localVarResp = getAccessTokenWithHttpInfo(authenticationGetAccessTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccessToken request with HTTP info returned
         * @return ApiResponse&lt;AuthenticationGetAccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthenticationGetAccessTokenResponse> executeWithHttpInfo() throws ApiException {
            AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest = buildBodyParams();
            return getAccessTokenWithHttpInfo(authenticationGetAccessTokenRequest);
        }

        /**
         * Execute getAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthenticationGetAccessTokenResponse> _callback) throws ApiException {
            AuthenticationGetAccessTokenRequest authenticationGetAccessTokenRequest = buildBodyParams();
            return getAccessTokenAsync(authenticationGetAccessTokenRequest, _callback);
        }
    }

    /**
     * Get access token
     * 
     * @return GetAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetAccessTokenRequestBuilder getAccessToken() throws IllegalArgumentException {
        return new GetAccessTokenRequestBuilder();
    }
}
