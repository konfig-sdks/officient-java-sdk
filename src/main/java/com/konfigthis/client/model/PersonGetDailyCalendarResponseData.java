/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PersonGetDailyCalendarResponseDataTimeOffInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PersonGetDailyCalendarResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PersonGetDailyCalendarResponseData {
  public static final String SERIALIZED_NAME_TIME_OFF = "time_off";
  @SerializedName(SERIALIZED_NAME_TIME_OFF)
  private List<PersonGetDailyCalendarResponseDataTimeOffInner> timeOff = null;

  public static final String SERIALIZED_NAME_COMPANY_DAYS_OFF = "company_days_off";
  @SerializedName(SERIALIZED_NAME_COMPANY_DAYS_OFF)
  private List<Object> companyDaysOff = null;

  public PersonGetDailyCalendarResponseData() {
  }

  public PersonGetDailyCalendarResponseData timeOff(List<PersonGetDailyCalendarResponseDataTimeOffInner> timeOff) {
    
    
    
    
    this.timeOff = timeOff;
    return this;
  }

  public PersonGetDailyCalendarResponseData addTimeOffItem(PersonGetDailyCalendarResponseDataTimeOffInner timeOffItem) {
    if (this.timeOff == null) {
      this.timeOff = new ArrayList<>();
    }
    this.timeOff.add(timeOffItem);
    return this;
  }

   /**
   * Get timeOff
   * @return timeOff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PersonGetDailyCalendarResponseDataTimeOffInner> getTimeOff() {
    return timeOff;
  }


  public void setTimeOff(List<PersonGetDailyCalendarResponseDataTimeOffInner> timeOff) {
    
    
    
    this.timeOff = timeOff;
  }


  public PersonGetDailyCalendarResponseData companyDaysOff(List<Object> companyDaysOff) {
    
    
    
    
    this.companyDaysOff = companyDaysOff;
    return this;
  }

  public PersonGetDailyCalendarResponseData addCompanyDaysOffItem(Object companyDaysOffItem) {
    if (this.companyDaysOff == null) {
      this.companyDaysOff = new ArrayList<>();
    }
    this.companyDaysOff.add(companyDaysOffItem);
    return this;
  }

   /**
   * Get companyDaysOff
   * @return companyDaysOff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getCompanyDaysOff() {
    return companyDaysOff;
  }


  public void setCompanyDaysOff(List<Object> companyDaysOff) {
    
    
    
    this.companyDaysOff = companyDaysOff;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PersonGetDailyCalendarResponseData instance itself
   */
  public PersonGetDailyCalendarResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonGetDailyCalendarResponseData personGetDailyCalendarResponseData = (PersonGetDailyCalendarResponseData) o;
    return Objects.equals(this.timeOff, personGetDailyCalendarResponseData.timeOff) &&
        Objects.equals(this.companyDaysOff, personGetDailyCalendarResponseData.companyDaysOff)&&
        Objects.equals(this.additionalProperties, personGetDailyCalendarResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeOff, companyDaysOff, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonGetDailyCalendarResponseData {\n");
    sb.append("    timeOff: ").append(toIndentedString(timeOff)).append("\n");
    sb.append("    companyDaysOff: ").append(toIndentedString(companyDaysOff)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("time_off");
    openapiFields.add("company_days_off");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonGetDailyCalendarResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonGetDailyCalendarResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonGetDailyCalendarResponseData is not found in the empty JSON string", PersonGetDailyCalendarResponseData.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("time_off") != null && !jsonObj.get("time_off").isJsonNull()) {
        JsonArray jsonArraytimeOff = jsonObj.getAsJsonArray("time_off");
        if (jsonArraytimeOff != null) {
          // ensure the json data is an array
          if (!jsonObj.get("time_off").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `time_off` to be an array in the JSON string but got `%s`", jsonObj.get("time_off").toString()));
          }

          // validate the optional field `time_off` (array)
          for (int i = 0; i < jsonArraytimeOff.size(); i++) {
            PersonGetDailyCalendarResponseDataTimeOffInner.validateJsonObject(jsonArraytimeOff.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("company_days_off") != null && !jsonObj.get("company_days_off").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_days_off` to be an array in the JSON string but got `%s`", jsonObj.get("company_days_off").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonGetDailyCalendarResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonGetDailyCalendarResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonGetDailyCalendarResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonGetDailyCalendarResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonGetDailyCalendarResponseData>() {
           @Override
           public void write(JsonWriter out, PersonGetDailyCalendarResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonGetDailyCalendarResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PersonGetDailyCalendarResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonGetDailyCalendarResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonGetDailyCalendarResponseData
  * @throws IOException if the JSON string is invalid with respect to PersonGetDailyCalendarResponseData
  */
  public static PersonGetDailyCalendarResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonGetDailyCalendarResponseData.class);
  }

 /**
  * Convert an instance of PersonGetDailyCalendarResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

