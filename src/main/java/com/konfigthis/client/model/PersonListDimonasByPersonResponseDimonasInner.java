/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PersonListDimonasByPersonResponseDimonasInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PersonListDimonasByPersonResponseDimonasInner {
  public static final String SERIALIZED_NAME_DIMONA_NUMBER = "dimona_number";
  @SerializedName(SERIALIZED_NAME_DIMONA_NUMBER)
  private Integer dimonaNumber = 0;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CONTRACT_START_DATE = "contract_start_date";
  @SerializedName(SERIALIZED_NAME_CONTRACT_START_DATE)
  private String contractStartDate;

  public static final String SERIALIZED_NAME_CONTRACT_END_DATE = "contract_end_date";
  @SerializedName(SERIALIZED_NAME_CONTRACT_END_DATE)
  private String contractEndDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_INITIATED_VIA_OFFICIENT = "initiated_via_officient";
  @SerializedName(SERIALIZED_NAME_INITIATED_VIA_OFFICIENT)
  private Integer initiatedViaOfficient = 0;

  public PersonListDimonasByPersonResponseDimonasInner() {
  }

  public PersonListDimonasByPersonResponseDimonasInner dimonaNumber(Integer dimonaNumber) {
    
    
    
    
    this.dimonaNumber = dimonaNumber;
    return this;
  }

   /**
   * Get dimonaNumber
   * @return dimonaNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "")

  public Integer getDimonaNumber() {
    return dimonaNumber;
  }


  public void setDimonaNumber(Integer dimonaNumber) {
    
    
    
    this.dimonaNumber = dimonaNumber;
  }


  public PersonListDimonasByPersonResponseDimonasInner type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IN", value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public PersonListDimonasByPersonResponseDimonasInner contractStartDate(String contractStartDate) {
    
    
    
    
    this.contractStartDate = contractStartDate;
    return this;
  }

   /**
   * Get contractStartDate
   * @return contractStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-08-05", value = "")

  public String getContractStartDate() {
    return contractStartDate;
  }


  public void setContractStartDate(String contractStartDate) {
    
    
    
    this.contractStartDate = contractStartDate;
  }


  public PersonListDimonasByPersonResponseDimonasInner contractEndDate(String contractEndDate) {
    
    
    
    
    this.contractEndDate = contractEndDate;
    return this;
  }

   /**
   * Get contractEndDate
   * @return contractEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-08-21", value = "")

  public String getContractEndDate() {
    return contractEndDate;
  }


  public void setContractEndDate(String contractEndDate) {
    
    
    
    this.contractEndDate = contractEndDate;
  }


  public PersonListDimonasByPersonResponseDimonasInner status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "success", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public PersonListDimonasByPersonResponseDimonasInner initiatedViaOfficient(Integer initiatedViaOfficient) {
    
    
    
    
    this.initiatedViaOfficient = initiatedViaOfficient;
    return this;
  }

   /**
   * Get initiatedViaOfficient
   * @return initiatedViaOfficient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getInitiatedViaOfficient() {
    return initiatedViaOfficient;
  }


  public void setInitiatedViaOfficient(Integer initiatedViaOfficient) {
    
    
    
    this.initiatedViaOfficient = initiatedViaOfficient;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PersonListDimonasByPersonResponseDimonasInner instance itself
   */
  public PersonListDimonasByPersonResponseDimonasInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonListDimonasByPersonResponseDimonasInner personListDimonasByPersonResponseDimonasInner = (PersonListDimonasByPersonResponseDimonasInner) o;
    return Objects.equals(this.dimonaNumber, personListDimonasByPersonResponseDimonasInner.dimonaNumber) &&
        Objects.equals(this.type, personListDimonasByPersonResponseDimonasInner.type) &&
        Objects.equals(this.contractStartDate, personListDimonasByPersonResponseDimonasInner.contractStartDate) &&
        Objects.equals(this.contractEndDate, personListDimonasByPersonResponseDimonasInner.contractEndDate) &&
        Objects.equals(this.status, personListDimonasByPersonResponseDimonasInner.status) &&
        Objects.equals(this.initiatedViaOfficient, personListDimonasByPersonResponseDimonasInner.initiatedViaOfficient)&&
        Objects.equals(this.additionalProperties, personListDimonasByPersonResponseDimonasInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimonaNumber, type, contractStartDate, contractEndDate, status, initiatedViaOfficient, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonListDimonasByPersonResponseDimonasInner {\n");
    sb.append("    dimonaNumber: ").append(toIndentedString(dimonaNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    contractStartDate: ").append(toIndentedString(contractStartDate)).append("\n");
    sb.append("    contractEndDate: ").append(toIndentedString(contractEndDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    initiatedViaOfficient: ").append(toIndentedString(initiatedViaOfficient)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimona_number");
    openapiFields.add("type");
    openapiFields.add("contract_start_date");
    openapiFields.add("contract_end_date");
    openapiFields.add("status");
    openapiFields.add("initiated_via_officient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonListDimonasByPersonResponseDimonasInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonListDimonasByPersonResponseDimonasInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonListDimonasByPersonResponseDimonasInner is not found in the empty JSON string", PersonListDimonasByPersonResponseDimonasInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("contract_start_date") != null && !jsonObj.get("contract_start_date").isJsonNull()) && !jsonObj.get("contract_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_start_date").toString()));
      }
      if ((jsonObj.get("contract_end_date") != null && !jsonObj.get("contract_end_date").isJsonNull()) && !jsonObj.get("contract_end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_end_date").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonListDimonasByPersonResponseDimonasInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonListDimonasByPersonResponseDimonasInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonListDimonasByPersonResponseDimonasInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonListDimonasByPersonResponseDimonasInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonListDimonasByPersonResponseDimonasInner>() {
           @Override
           public void write(JsonWriter out, PersonListDimonasByPersonResponseDimonasInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonListDimonasByPersonResponseDimonasInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PersonListDimonasByPersonResponseDimonasInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonListDimonasByPersonResponseDimonasInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonListDimonasByPersonResponseDimonasInner
  * @throws IOException if the JSON string is invalid with respect to PersonListDimonasByPersonResponseDimonasInner
  */
  public static PersonListDimonasByPersonResponseDimonasInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonListDimonasByPersonResponseDimonasInner.class);
  }

 /**
  * Convert an instance of PersonListDimonasByPersonResponseDimonasInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

