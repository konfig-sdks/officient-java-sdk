/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ExpenseAddExpenseWithCategoryRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExpenseAddExpenseWithCategoryRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Integer employeeId;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId = 0;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_EXTRA_INFORMATION = "extra_information";
  @SerializedName(SERIALIZED_NAME_EXTRA_INFORMATION)
  private String extraInformation;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FILE_BASE64 = "file_base64";
  @SerializedName(SERIALIZED_NAME_FILE_BASE64)
  private String fileBase64;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private List<String> dates = null;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance = 0;

  /**
   * this is the value if it&#39;s an outward or a round journey when using kilometer allowances, this defaults to single
   */
  @JsonAdapter(RideEnum.Adapter.class)
 public enum RideEnum {
    SINGLE("single"),
    
    DOUBLE("double");

    private String value;

    RideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RideEnum fromValue(String value) {
      for (RideEnum b : RideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RideEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RIDE = "ride";
  @SerializedName(SERIALIZED_NAME_RIDE)
  private RideEnum ride = RideEnum.SINGLE;

  public ExpenseAddExpenseWithCategoryRequest() {
  }

  public ExpenseAddExpenseWithCategoryRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * This is the title for the expense
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "This is the title for the expense")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ExpenseAddExpenseWithCategoryRequest employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Integer employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public ExpenseAddExpenseWithCategoryRequest categoryId(Integer categoryId) {
    
    
    
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * For some integrations this is required not to be 0 which is the default category id
   * @return categoryId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "For some integrations this is required not to be 0 which is the default category id")

  public Integer getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(Integer categoryId) {
    
    
    
    this.categoryId = categoryId;
  }


  public ExpenseAddExpenseWithCategoryRequest amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * this is the price of the expense, this is only required when using a total amount category
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "this is the price of the expense, this is only required when using a total amount category")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public ExpenseAddExpenseWithCategoryRequest extraInformation(String extraInformation) {
    
    
    
    
    this.extraInformation = extraInformation;
    return this;
  }

   /**
   * Get extraInformation
   * @return extraInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExtraInformation() {
    return extraInformation;
  }


  public void setExtraInformation(String extraInformation) {
    
    
    
    this.extraInformation = extraInformation;
  }


  public ExpenseAddExpenseWithCategoryRequest date(String date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * this is the day the expense has incurred on and is required when it is a total amount category
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "this is the day the expense has incurred on and is required when it is a total amount category")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    
    
    
    this.date = date;
  }


  public ExpenseAddExpenseWithCategoryRequest filename(String filename) {
    
    
    
    
    this.filename = filename;
    return this;
  }

   /**
   * this is required when you want to add an expense with a total amount category
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "this is required when you want to add an expense with a total amount category")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    
    
    
    this.filename = filename;
  }


  public ExpenseAddExpenseWithCategoryRequest fileBase64(String fileBase64) {
    
    
    
    
    this.fileBase64 = fileBase64;
    return this;
  }

   /**
   * this is required when you want to add an expense with a total amount category
   * @return fileBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "this is required when you want to add an expense with a total amount category")

  public String getFileBase64() {
    return fileBase64;
  }


  public void setFileBase64(String fileBase64) {
    
    
    
    this.fileBase64 = fileBase64;
  }


  public ExpenseAddExpenseWithCategoryRequest dates(List<String> dates) {
    
    
    
    
    this.dates = dates;
    return this;
  }

  public ExpenseAddExpenseWithCategoryRequest addDatesItem(String datesItem) {
    if (this.dates == null) {
      this.dates = new ArrayList<>();
    }
    this.dates.add(datesItem);
    return this;
  }

   /**
   * this is required when you want to add an expense with a kilometer or day allowance expense category, multiple dates are also possible (ex: [\&quot;24/05/2023\&quot;, \&quot;26/05/2023\&quot;])
   * @return dates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "this is required when you want to add an expense with a kilometer or day allowance expense category, multiple dates are also possible (ex: [\"24/05/2023\", \"26/05/2023\"])")

  public List<String> getDates() {
    return dates;
  }


  public void setDates(List<String> dates) {
    
    
    
    this.dates = dates;
  }


  public ExpenseAddExpenseWithCategoryRequest distance(Integer distance) {
    
    
    
    
    this.distance = distance;
    return this;
  }

   /**
   * this is required when you want to update to a killometer allowance expense category. This is equal to the total amount of kilometers that has been done
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "this is required when you want to update to a killometer allowance expense category. This is equal to the total amount of kilometers that has been done")

  public Integer getDistance() {
    return distance;
  }


  public void setDistance(Integer distance) {
    
    
    
    this.distance = distance;
  }


  public ExpenseAddExpenseWithCategoryRequest ride(RideEnum ride) {
    
    
    
    
    this.ride = ride;
    return this;
  }

   /**
   * this is the value if it&#39;s an outward or a round journey when using kilometer allowances, this defaults to single
   * @return ride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SINGLE", value = "this is the value if it's an outward or a round journey when using kilometer allowances, this defaults to single")

  public RideEnum getRide() {
    return ride;
  }


  public void setRide(RideEnum ride) {
    
    
    
    this.ride = ride;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExpenseAddExpenseWithCategoryRequest instance itself
   */
  public ExpenseAddExpenseWithCategoryRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseAddExpenseWithCategoryRequest expenseAddExpenseWithCategoryRequest = (ExpenseAddExpenseWithCategoryRequest) o;
    return Objects.equals(this.description, expenseAddExpenseWithCategoryRequest.description) &&
        Objects.equals(this.employeeId, expenseAddExpenseWithCategoryRequest.employeeId) &&
        Objects.equals(this.categoryId, expenseAddExpenseWithCategoryRequest.categoryId) &&
        Objects.equals(this.amount, expenseAddExpenseWithCategoryRequest.amount) &&
        Objects.equals(this.extraInformation, expenseAddExpenseWithCategoryRequest.extraInformation) &&
        Objects.equals(this.date, expenseAddExpenseWithCategoryRequest.date) &&
        Objects.equals(this.filename, expenseAddExpenseWithCategoryRequest.filename) &&
        Objects.equals(this.fileBase64, expenseAddExpenseWithCategoryRequest.fileBase64) &&
        Objects.equals(this.dates, expenseAddExpenseWithCategoryRequest.dates) &&
        Objects.equals(this.distance, expenseAddExpenseWithCategoryRequest.distance) &&
        Objects.equals(this.ride, expenseAddExpenseWithCategoryRequest.ride)&&
        Objects.equals(this.additionalProperties, expenseAddExpenseWithCategoryRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, employeeId, categoryId, amount, extraInformation, date, filename, fileBase64, dates, distance, ride, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseAddExpenseWithCategoryRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    extraInformation: ").append(toIndentedString(extraInformation)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    fileBase64: ").append(toIndentedString(fileBase64)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    ride: ").append(toIndentedString(ride)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("employee_id");
    openapiFields.add("category_id");
    openapiFields.add("amount");
    openapiFields.add("extra_information");
    openapiFields.add("date");
    openapiFields.add("filename");
    openapiFields.add("file_base64");
    openapiFields.add("dates");
    openapiFields.add("distance");
    openapiFields.add("ride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("employee_id");
    openapiRequiredFields.add("category_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExpenseAddExpenseWithCategoryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExpenseAddExpenseWithCategoryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseAddExpenseWithCategoryRequest is not found in the empty JSON string", ExpenseAddExpenseWithCategoryRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExpenseAddExpenseWithCategoryRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("extra_information") != null && !jsonObj.get("extra_information").isJsonNull()) && !jsonObj.get("extra_information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra_information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra_information").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("file_base64") != null && !jsonObj.get("file_base64").isJsonNull()) && !jsonObj.get("file_base64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_base64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_base64").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dates` to be an array in the JSON string but got `%s`", jsonObj.get("dates").toString()));
      }
      if ((jsonObj.get("ride") != null && !jsonObj.get("ride").isJsonNull()) && !jsonObj.get("ride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ride").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseAddExpenseWithCategoryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseAddExpenseWithCategoryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseAddExpenseWithCategoryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseAddExpenseWithCategoryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseAddExpenseWithCategoryRequest>() {
           @Override
           public void write(JsonWriter out, ExpenseAddExpenseWithCategoryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseAddExpenseWithCategoryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExpenseAddExpenseWithCategoryRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExpenseAddExpenseWithCategoryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExpenseAddExpenseWithCategoryRequest
  * @throws IOException if the JSON string is invalid with respect to ExpenseAddExpenseWithCategoryRequest
  */
  public static ExpenseAddExpenseWithCategoryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseAddExpenseWithCategoryRequest.class);
  }

 /**
  * Convert an instance of ExpenseAddExpenseWithCategoryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

