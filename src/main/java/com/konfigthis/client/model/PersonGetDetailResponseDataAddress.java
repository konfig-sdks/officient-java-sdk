/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PersonGetDetailResponseDataAddress
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PersonGetDetailResponseDataAddress {
  public static final String SERIALIZED_NAME_LINE1 = "line_1";
  @SerializedName(SERIALIZED_NAME_LINE1)
  private String line1;

  public static final String SERIALIZED_NAME_LINE2 = "line_2";
  @SerializedName(SERIALIZED_NAME_LINE2)
  private String line2;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DATE_LAST_CHANGED = "date_last_changed";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_CHANGED)
  private String dateLastChanged;

  public PersonGetDetailResponseDataAddress() {
  }

  public PersonGetDetailResponseDataAddress line1(String line1) {
    
    
    
    
    this.line1 = line1;
    return this;
  }

   /**
   * Get line1
   * @return line1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3828 Piermont Dr", value = "")

  public String getLine1() {
    return line1;
  }


  public void setLine1(String line1) {
    
    
    
    this.line1 = line1;
  }


  public PersonGetDetailResponseDataAddress line2(String line2) {
    
    
    
    
    this.line2 = line2;
    return this;
  }

   /**
   * Get line2
   * @return line2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getLine2() {
    return line2;
  }


  public void setLine2(String line2) {
    
    
    
    this.line2 = line2;
  }


  public PersonGetDetailResponseDataAddress zipcode(String zipcode) {
    
    
    
    
    this.zipcode = zipcode;
    return this;
  }

   /**
   * Get zipcode
   * @return zipcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "87112", value = "")

  public String getZipcode() {
    return zipcode;
  }


  public void setZipcode(String zipcode) {
    
    
    
    this.zipcode = zipcode;
  }


  public PersonGetDetailResponseDataAddress city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Albuquerque", value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public PersonGetDetailResponseDataAddress state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NM", value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public PersonGetDetailResponseDataAddress countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public PersonGetDetailResponseDataAddress dateLastChanged(String dateLastChanged) {
    
    
    
    
    this.dateLastChanged = dateLastChanged;
    return this;
  }

   /**
   * Get dateLastChanged
   * @return dateLastChanged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-14-01", value = "")

  public String getDateLastChanged() {
    return dateLastChanged;
  }


  public void setDateLastChanged(String dateLastChanged) {
    
    
    
    this.dateLastChanged = dateLastChanged;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PersonGetDetailResponseDataAddress instance itself
   */
  public PersonGetDetailResponseDataAddress putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonGetDetailResponseDataAddress personGetDetailResponseDataAddress = (PersonGetDetailResponseDataAddress) o;
    return Objects.equals(this.line1, personGetDetailResponseDataAddress.line1) &&
        Objects.equals(this.line2, personGetDetailResponseDataAddress.line2) &&
        Objects.equals(this.zipcode, personGetDetailResponseDataAddress.zipcode) &&
        Objects.equals(this.city, personGetDetailResponseDataAddress.city) &&
        Objects.equals(this.state, personGetDetailResponseDataAddress.state) &&
        Objects.equals(this.countryCode, personGetDetailResponseDataAddress.countryCode) &&
        Objects.equals(this.dateLastChanged, personGetDetailResponseDataAddress.dateLastChanged)&&
        Objects.equals(this.additionalProperties, personGetDetailResponseDataAddress.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(line1, line2, zipcode, city, state, countryCode, dateLastChanged, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonGetDetailResponseDataAddress {\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    dateLastChanged: ").append(toIndentedString(dateLastChanged)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line_1");
    openapiFields.add("line_2");
    openapiFields.add("zipcode");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("country_code");
    openapiFields.add("date_last_changed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonGetDetailResponseDataAddress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonGetDetailResponseDataAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonGetDetailResponseDataAddress is not found in the empty JSON string", PersonGetDetailResponseDataAddress.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("line_1") != null && !jsonObj.get("line_1").isJsonNull()) && !jsonObj.get("line_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_1").toString()));
      }
      if ((jsonObj.get("line_2") != null && !jsonObj.get("line_2").isJsonNull()) && !jsonObj.get("line_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_2").toString()));
      }
      if ((jsonObj.get("zipcode") != null && !jsonObj.get("zipcode").isJsonNull()) && !jsonObj.get("zipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipcode").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("date_last_changed") != null && !jsonObj.get("date_last_changed").isJsonNull()) && !jsonObj.get("date_last_changed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_last_changed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_last_changed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonGetDetailResponseDataAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonGetDetailResponseDataAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonGetDetailResponseDataAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonGetDetailResponseDataAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonGetDetailResponseDataAddress>() {
           @Override
           public void write(JsonWriter out, PersonGetDetailResponseDataAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonGetDetailResponseDataAddress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PersonGetDetailResponseDataAddress instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonGetDetailResponseDataAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonGetDetailResponseDataAddress
  * @throws IOException if the JSON string is invalid with respect to PersonGetDetailResponseDataAddress
  */
  public static PersonGetDetailResponseDataAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonGetDetailResponseDataAddress.class);
  }

 /**
  * Convert an instance of PersonGetDetailResponseDataAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

