/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BudgetAddBudgetItemRequest;
import com.konfigthis.client.model.BudgetAddBudgetItemResponse;
import com.konfigthis.client.model.BudgetAddItemRequest;
import com.konfigthis.client.model.BudgetAddItemResponse;
import com.konfigthis.client.model.BudgetDeleteBudgetByIdResponse;
import com.konfigthis.client.model.BudgetRemoveItemResponse;
import com.konfigthis.client.model.BudgetUpdateBudgetItemRequest;
import com.konfigthis.client.model.BudgetUpdateBudgetItemResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BudgetApi
 */
@Disabled
public class BudgetApiTest {

    private static BudgetApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BudgetApi(apiClient);
    }

    /**
     * Add budget
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBudgetItemTest() throws ApiException {
        String budgetType = null;
        Integer maximum = null;
        Integer year = null;
        Integer employeeId = null;
        BudgetAddBudgetItemResponse response = api.addBudgetItem()
                .budgetType(budgetType)
                .maximum(maximum)
                .year(year)
                .employeeId(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add budget item
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addItemTest() throws ApiException {
        Integer budgetId = null;
        String itemName = null;
        Double cost = null;
        Integer employeeId = null;
        BudgetAddItemResponse response = api.addItem(budgetId)
                .itemName(itemName)
                .cost(cost)
                .employeeId(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete budget
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBudgetByIdTest() throws ApiException {
        Integer budgetId = null;
        BudgetDeleteBudgetByIdResponse response = api.deleteBudgetById(budgetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete budget item
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeItemTest() throws ApiException {
        Integer budgetId = null;
        Integer itemId = null;
        BudgetRemoveItemResponse response = api.removeItem(budgetId)
                .itemId(itemId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit budget
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBudgetItemTest() throws ApiException {
        Integer budgetId = null;
        Integer maximum = null;
        BudgetUpdateBudgetItemResponse response = api.updateBudgetItem(budgetId)
                .maximum(maximum)
                .execute();
        // TODO: test validations
    }

}
