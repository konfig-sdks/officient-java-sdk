/*
 * Officient API
 * Officient offers an intuitive HRIS which helps manage all personnel administration through our HR platform & personalized employee self-services. Manage payroll, company assets, contracts, days off, fleet, performance reviews and all employee data in one HR system. HR deserves great software and we're here to provide it.  We support our customers in transforming HR towards paperless administration and automating tedious workforce management tasks in the process. Our goal? Transform HR from an administrative, processing role, to a controlling role which fuels HR strategy across the organization.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExpenseAddCategoryRequest;
import com.konfigthis.client.model.ExpenseAddCategoryResponse;
import com.konfigthis.client.model.ExpenseAddExpenseWithCategoryRequest;
import com.konfigthis.client.model.ExpenseAddExpenseWithCategoryResponse;
import com.konfigthis.client.model.ExpenseDeleteByIdResponse;
import com.konfigthis.client.model.ExpenseDeleteCategoryResponse;
import com.konfigthis.client.model.ExpenseEditCategoryNameRequest;
import com.konfigthis.client.model.ExpenseEditCategoryNameResponse;
import com.konfigthis.client.model.ExpenseGetDetailResponse;
import com.konfigthis.client.model.ExpenseListByCategoryDetailResponse;
import com.konfigthis.client.model.ExpenseListByMonthResponse;
import com.konfigthis.client.model.ExpenseListByYearResponse;
import com.konfigthis.client.model.ExpenseSetPayoutMethodAndStatusRequest;
import com.konfigthis.client.model.ExpenseSetPayoutMethodAndStatusResponse;
import com.konfigthis.client.model.ExpenseUpdateDetailsRequest;
import com.konfigthis.client.model.ExpenseUpdateDetailsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpenseApi
 */
@Disabled
public class ExpenseApiTest {

    private static ExpenseApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExpenseApi(apiClient);
    }

    /**
     * Add expense category
     *
     * The api end-point to add an expense nd an optional category id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCategoryTest() throws ApiException {
        String name = null;
        String type = null;
        Float pricePerKilometer = null;
        Float pricePerDay = null;
        ExpenseAddCategoryResponse response = api.addCategory(name, type)
                .pricePerKilometer(pricePerKilometer)
                .pricePerDay(pricePerDay)
                .execute();
        // TODO: test validations
    }

    /**
     * Add expense
     *
     * The api end-point to add an expense nd an optional category id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addExpenseWithCategoryTest() throws ApiException {
        String description = null;
        Integer employeeId = null;
        Integer categoryId = null;
        Float amount = null;
        String extraInformation = null;
        String date = null;
        String filename = null;
        String fileBase64 = null;
        List<String> dates = null;
        Integer distance = null;
        String ride = null;
        ExpenseAddExpenseWithCategoryResponse response = api.addExpenseWithCategory(description, employeeId, categoryId)
                .amount(amount)
                .extraInformation(extraInformation)
                .date(date)
                .filename(filename)
                .fileBase64(fileBase64)
                .dates(dates)
                .distance(distance)
                .ride(ride)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete expense
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        Integer expenseId = null;
        ExpenseDeleteByIdResponse response = api.deleteById(expenseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete expense category
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategoryTest() throws ApiException {
        Integer categoryId = null;
        ExpenseDeleteCategoryResponse response = api.deleteCategory(categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit expense category name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editCategoryNameTest() throws ApiException {
        String name = null;
        Integer categoryId = null;
        ExpenseEditCategoryNameResponse response = api.editCategoryName(name, categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Expense detail
     *
     * List all expenses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailTest() throws ApiException {
        Integer expenseId = null;
        ExpenseGetDetailResponse response = api.getDetail(expenseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Expense category detail
     *
     * List all expenses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByCategoryDetailTest() throws ApiException {
        Integer categoryId = null;
        ExpenseListByCategoryDetailResponse response = api.listByCategoryDetail(categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * List expenses by month
     *
     * List all expenses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByMonthTest() throws ApiException {
        String year = null;
        String month = null;
        String page = null;
        Integer includeDeleted = null;
        ExpenseListByMonthResponse response = api.listByMonth(year, month)
                .page(page)
                .includeDeleted(includeDeleted)
                .execute();
        // TODO: test validations
    }

    /**
     * List expenses by year
     *
     * List all expenses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByYearTest() throws ApiException {
        String year = null;
        String month = null;
        String page = null;
        Integer includeDeleted = null;
        ExpenseListByYearResponse response = api.listByYear(year, month)
                .page(page)
                .includeDeleted(includeDeleted)
                .execute();
        // TODO: test validations
    }

    /**
     * List expense categories
     *
     * List all expenses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCategoriesTest() throws ApiException {
        String response = api.listCategories()
                .execute();
        // TODO: test validations
    }

    /**
     * Set payout method and status
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPayoutMethodAndStatusTest() throws ApiException {
        String newPayoutMethod = null;
        Integer expenseId = null;
        String payoutOtherReason = null;
        String payoutStatus = null;
        String period = null;
        String year = null;
        ExpenseSetPayoutMethodAndStatusResponse response = api.setPayoutMethodAndStatus(newPayoutMethod, expenseId)
                .payoutOtherReason(payoutOtherReason)
                .payoutStatus(payoutStatus)
                .period(period)
                .year(year)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit expense
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetailsTest() throws ApiException {
        Integer categoryId = null;
        Integer expenseId = null;
        ExpenseUpdateDetailsResponse response = api.updateDetails(categoryId, expenseId)
                .execute();
        // TODO: test validations
    }

}
